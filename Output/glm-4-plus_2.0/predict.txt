SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club;
SELECT Name FROM club ORDER BY Name ASC;
SELECT Name FROM club ORDER BY Name ASC;
SELECT Manager, Captain FROM club;
SELECT Manager, Captain FROM club;
SELECT Name FROM club WHERE Manufacturer != 'Nike';
SELECT Name FROM club WHERE Manufacturer != 'Nike';
SELECT Name FROM player ORDER BY Wins_count ASC;
SELECT Name FROM player ORDER BY Wins_count ASC;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID;
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID;
SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2;
SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2;
SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce';
SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce';
SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Club_ID ORDER BY AVG(p.Earnings) DESC;
SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC;
SELECT Manufacturer, COUNT(DISTINCT Club_ID) AS Club_Count FROM club GROUP BY Manufacturer;
SELECT Manufacturer, COUNT(*) AS ClubCount FROM club GROUP BY Manufacturer;
SELECT Manufacturer, COUNT(*) AS Frequency FROM club GROUP BY Manufacturer ORDER BY Frequency DESC LIMIT 1;
SELECT Manufacturer, COUNT(*) AS Frequency FROM club GROUP BY Manufacturer ORDER BY Frequency DESC LIMIT 1;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1;
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);
SELECT DISTINCT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000;
SELECT DISTINCT Country FROM player WHERE Country IN (     SELECT Country     FROM player     WHERE Earnings > 1400000 ) AND Country IN (     SELECT Country     FROM player     WHERE Earnings < 1100000 );
SELECT COUNT(DISTINCT Country) FROM player;
SELECT COUNT(DISTINCT Country) FROM player;
SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe');
SELECT SUM(Earnings)  FROM player  WHERE Country IN ('Australia', 'Zimbabwe');
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3;
SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code;
SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code;
SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)    OR order_id IN (        SELECT order_id        FROM Order_Items        GROUP BY order_id        HAVING COUNT(order_item_id) > 1    );
SELECT MIN(date_order_placed) AS earliest_order_date FROM Orders UNION ALL SELECT date_order_placed FROM Orders JOIN (     SELECT order_id     FROM Order_Items     GROUP BY order_id     HAVING COUNT(order_item_id) > 1 ) AS MultiItemOrders ON Orders.order_id = MultiItemOrders.order_id;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (     SELECT oi.product_id     FROM Order_Items oi     GROUP BY oi.product_id     HAVING COUNT(oi.order_id) >= 2 );
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_id) < 2;
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.product_id) >= 2;
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.product_id) >= 2;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1;
SELECT o.order_id, SUM(p.product_price) AS total_price FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_price ASC LIMIT 1;
SELECT o.order_id, SUM(p.product_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;
SELECT payment_method_code, COUNT(*) AS count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY count DESC LIMIT 1;
SELECT payment_method_code, COUNT(*) AS usage_count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY usage_count DESC LIMIT 1;
SELECT c.gender_code, COUNT(DISTINCT p.product_id) AS number_of_products FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.gender_code;
SELECT c.gender_code, COUNT(DISTINCT p.product_id) AS total_products FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.gender_code;
SELECT c.gender_code, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code;
SELECT c.gender_code, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, pm.payment_method_code FROM Customers c JOIN Customer_Payment_Methods pm ON c.customer_id = pm.customer_id;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, pm.payment_method_code FROM Customers c JOIN Customer_Payment_Methods pm ON c.customer_id = pm.customer_id;
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT i.invoice_number, i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT p.product_name, s.shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id;
SELECT p.product_name, s.shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id JOIN Shipment_Items si ON s.shipment_id = si.shipment_id AND oi.order_item_id = si.order_item_id;
SELECT Order_Items.order_item_status_code, Shipments.shipment_tracking_number FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id WHERE Order_Items.order_item_id = Shipment_Items.order_item_id;
SELECT Order_Items.order_item_status_code, Shipments.shipment_tracking_number FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id WHERE Order_Items.order_item_id = Shipment_Items.order_item_id;
SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id JOIN Shipment_Items si ON s.shipment_id = si.shipment_id WHERE si.shipment_id IS NOT NULL;
SELECT DISTINCT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id;
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F';
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F';
SELECT i.invoice_status_code FROM Invoices i JOIN Orders o ON i.invoice_number = (     SELECT s.invoice_number     FROM Shipments s     WHERE s.order_id = o.order_id ) WHERE o.order_id NOT IN (     SELECT s.order_id     FROM Shipments s );
SELECT DISTINCT i.invoice_status_code FROM Invoices i JOIN Orders o ON i.invoice_number = (     SELECT s.invoice_number     FROM Shipments s     WHERE s.order_id = o.order_id ) WHERE o.order_status_code NOT IN (     SELECT DISTINCT o.order_status_code     FROM Orders o     JOIN Shipments s ON o.order_id = s.order_id );
SELECT      o.order_id,      o.date_order_placed,      SUM(p.product_price) AS total_cost FROM      Orders o JOIN      Order_Items oi ON o.order_id = oi.order_id JOIN      Products p ON oi.product_id = p.product_id GROUP BY      o.order_id,      o.date_order_placed;
SELECT      o.order_id,      o.date_order_placed,      SUM(p.product_price) AS total_amount_paid FROM      Orders o JOIN      Order_Items oi ON o.order_id = oi.order_id JOIN      Products p ON oi.product_id = p.product_id GROUP BY      o.order_id;
SELECT COUNT(DISTINCT customer_id) FROM Orders;
SELECT COUNT(DISTINCT customer_id) FROM Orders;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT DISTINCT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT COUNT(DISTINCT p.product_id) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT COUNT(*)  FROM Products  WHERE product_id NOT IN (     SELECT DISTINCT product_id      FROM Order_Items );
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods);
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods);
SELECT order_status_code, date_order_placed FROM Orders;
SELECT order_status_code, date_order_placed FROM Orders;
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA';
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States';
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT COUNT(*)  FROM Shipment_Items;
SELECT COUNT(DISTINCT p.product_id) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id;
SELECT AVG(product_price) AS average_price FROM Products;
SELECT AVG(product_price) AS average_product_price FROM Products;
SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id;
SELECT AVG(product_price)  FROM Products  JOIN Order_Items ON Products.product_id = Order_Items.product_id;
SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (     SELECT gender_code     FROM Customers     GROUP BY gender_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN (     SELECT gender_code     FROM Customers     JOIN Orders ON Customers.customer_id = Orders.customer_id     GROUP BY gender_code     ORDER BY COUNT(*) ASC     LIMIT 1 ) AS less_frequent_gender ON c.gender_code = less_frequent_gender.gender_code;
SELECT date_order_placed FROM Orders WHERE customer_id IN (     SELECT customer_id     FROM Customer_Payment_Methods     GROUP BY customer_id     HAVING COUNT(payment_method_code) >= 2 );
SELECT date_order_placed FROM Orders WHERE customer_id IN (     SELECT customer_id     FROM Customer_Payment_Methods     GROUP BY customer_id     HAVING COUNT(payment_method_code) >= 2 );
SELECT order_status_code, COUNT(*) as count FROM Orders GROUP BY order_status_code ORDER BY count ASC LIMIT 1;
SELECT order_status_code, COUNT(*) as status_count FROM Orders GROUP BY order_status_code ORDER BY status_count ASC LIMIT 1;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3;
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(s.shipment_id) >= 2;
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(s.shipment_id) >= 2;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT d.Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director);
SELECT Name FROM director ORDER BY Age DESC LIMIT 1;
SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%';
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel;
SELECT Title FROM program ORDER BY Start_Year DESC;
SELECT d.Name, COUNT(p.Program_ID) AS ProgramCount FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY ProgramCount DESC LIMIT 1;
SELECT d.Name, d.Age FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(p.Program_ID) DESC LIMIT 1;
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1;
SELECT c.Name, c.Internet FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(p.Program_ID) > 1;
SELECT c.Name, COUNT(p.Program_ID) AS Program_Count FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Name;
SELECT COUNT(*)  FROM channel  WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program);
SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID WHERE p.Title = 'Dracula';
SELECT c.Name, c.Internet FROM channel c JOIN (     SELECT Channel_ID, COUNT(DISTINCT Director_ID) AS num_directors     FROM director_admin     GROUP BY Channel_ID     ORDER BY num_directors DESC     LIMIT 1 ) AS subq ON c.Channel_ID = subq.Channel_ID;
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60;
SELECT DISTINCT c.Name FROM channel c JOIN director_admin da1 ON c.Channel_ID = da1.Channel_ID JOIN director d1 ON da1.Director_ID = d1.Director_ID AND d1.Age < 40 JOIN director_admin da2 ON c.Channel_ID = da2.Channel_ID JOIN director d2 ON da2.Director_ID = d2.Director_ID AND d2.Age > 60;
SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (     SELECT da.Channel_ID     FROM director d     JOIN director_admin da ON d.Director_ID = da.Director_ID     WHERE d.Name = 'Hank Baskett' );
SELECT COUNT(*) FROM radio;
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC;
SELECT tv_show_name, Original_Airdate FROM tv_show;
SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC';
SELECT Transmitter FROM radio WHERE CAST(ERP_kW AS REAL) > 150 OR CAST(ERP_kW AS REAL) < 30;
SELECT Transmitter FROM radio ORDER BY CAST(ERP_kW AS REAL) DESC LIMIT 1;
SELECT AVG(CAST(ERP_kW AS REAL)) AS average_erp FROM radio;
SELECT Affiliation, COUNT(*) AS Num_City_Channels FROM city_channel GROUP BY Affiliation;
SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation ORDER BY Count DESC LIMIT 1;
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3;
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC;
SELECT r.Transmitter, c.City FROM radio r JOIN city_channel_radio cr ON r.Radio_ID = cr.Radio_ID JOIN city_channel c ON cr.City_channel_ID = c.ID;
SELECT r.Transmitter, cc.Station_name FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY CAST(r.ERP_kW AS REAL) DESC;
SELECT r.Transmitter, COUNT(ccr.City_channel_ID) AS Num_City_Channels FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter;
SELECT DISTINCT r.Transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID WHERE ccr.City_channel_ID IS NULL;
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1;
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1;
SELECT Name FROM driver WHERE Citizenship = 'United States';
SELECT Name FROM driver WHERE Citizenship = 'United States';
SELECT Driver_ID, COUNT(Vehicle_ID) AS Num_Vehicles FROM vehicle_driver GROUP BY Driver_ID ORDER BY Num_Vehicles DESC LIMIT 1;
SELECT vd.Driver_ID, COUNT(vd.Vehicle_ID) AS Num_Vehicles FROM vehicle_driver vd GROUP BY vd.Driver_ID ORDER BY Num_Vehicles DESC LIMIT 1;
SELECT MAX(Power) AS Max_Power, AVG(Power) AS Average_Power FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT MAX(Power) AS Max_Power, AVG(Power) AS Average_Power FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996';
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996';
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = '2012';
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = '2012';
SELECT COUNT(*)  FROM driver  WHERE Racing_Series = 'NASCAR';
SELECT COUNT(*)  FROM driver  WHERE Racing_Series = 'NASCAR';
SELECT AVG(Top_Speed) FROM vehicle;
SELECT AVG(Top_Speed) FROM vehicle;
SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
SELECT Model FROM vehicle WHERE Total_Production > '100' OR Top_Speed > 150;
SELECT Model FROM vehicle WHERE Total_Production > '100' OR Top_Speed > 150;
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (     SELECT Vehicle_ID     FROM vehicle_driver );
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (     SELECT Vehicle_ID     FROM vehicle_driver );
SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Builder = 'Ziyang'    OR v.Vehicle_ID IN (        SELECT vd.Vehicle_ID        FROM vehicle_driver vd        GROUP BY vd.Vehicle_ID        HAVING COUNT(vd.Driver_ID) >= 2    );
SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE (     SELECT COUNT(DISTINCT vd.Driver_ID)     FROM vehicle_driver vd     WHERE vd.Vehicle_ID = v.Vehicle_ID ) = 2 OR v.Builder = 'Ziyang';
SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(DISTINCT d.Driver_ID) > 2 OR MAX(d.Name) = 'Jeff Gordon';
SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(DISTINCT d.Driver_ID) > 2 OR MAX(d.Name) = 'Jeff Gordon';
SELECT COUNT(*)  FROM vehicle  WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT COUNT(*)  FROM vehicle  WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT Name FROM driver ORDER BY Name ASC;
SELECT Name FROM driver ORDER BY Name ASC;
SELECT Racing_Series, COUNT(DISTINCT Driver_ID) AS Num_Drivers FROM driver GROUP BY Racing_Series;
SELECT Racing_Series, COUNT(DISTINCT Driver_ID) AS Num_Drivers FROM driver GROUP BY Racing_Series;
SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1';
SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1';
SELECT COUNT(*)  FROM driver  WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver);
SELECT COUNT(*)  FROM driver  WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver);
SELECT COUNT(*) FROM Exams;
SELECT COUNT(*) FROM Exams;
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;
SELECT Exam_Name, Exam_Date  FROM Exams  WHERE Subject_Code != 'Database';
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database';
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT Type_of_Question_Code, COUNT(*) AS Question_Count FROM Questions GROUP BY Type_of_Question_Code;
SELECT Type_of_Question_Code, COUNT(*) AS Occurrence FROM Questions GROUP BY Type_of_Question_Code;
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';
SELECT COUNT(DISTINCT Comments) FROM Student_Answers;
SELECT COUNT(DISTINCT Comments)  FROM Student_Answers;
SELECT Student_Answer_Text, COUNT(*) AS AnswerCount FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY AnswerCount DESC;
SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC;
SELECT First_Name, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID;
SELECT s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC;
SELECT s.Email_Address, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY sa.Date_of_Answer DESC;
SELECT Assessment, COUNT(*) as Count FROM Student_Assessments GROUP BY Assessment ORDER BY Count ASC LIMIT 1;
SELECT Assessment, COUNT(*) as Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1;
SELECT First_Name FROM Students WHERE Student_ID IN (     SELECT Student_ID     FROM Student_Answers     GROUP BY Student_ID     HAVING COUNT(*) >= 2 );
SELECT First_Name FROM Students WHERE Student_ID IN (     SELECT Student_ID     FROM Student_Answers     GROUP BY Student_ID     HAVING COUNT(*) >= 2 );
SELECT Valid_Answer_Text, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Frequency DESC LIMIT 1;
SELECT Valid_Answer_Text, COUNT(*) AS Frequency FROM Valid_Answers JOIN Student_Assessments ON Valid_Answers.Valid_Answer_ID = Student_Assessments.Valid_Answer_ID WHERE Student_Assessments.Satisfactory_YN = 'Y' GROUP BY Valid_Answer_Text ORDER BY Frequency DESC LIMIT 1;
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M';
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M';
SELECT Gender_MFU, COUNT(Student_ID) AS Number_of_Students FROM Students GROUP BY Gender_MFU;
SELECT Gender_MFU, COUNT(Student_ID) AS Number_of_Students FROM Students GROUP BY Gender_MFU;
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');
SELECT First_Name FROM Students WHERE Student_ID NOT IN (     SELECT DISTINCT Student_ID     FROM Student_Answers );
SELECT First_Name FROM Students WHERE Student_ID NOT IN (     SELECT DISTINCT Student_ID     FROM Student_Answers );
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal' AND EXISTS (     SELECT 1     FROM Student_Answers sa2     WHERE sa2.Student_Answer_Text = sa.Student_Answer_Text     AND sa2.Comments = 'Absent' );
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal' INTERSECT SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Absent';
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3;
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3;
SELECT * FROM Students;
SELECT * FROM Students;
SELECT COUNT(*) FROM Addresses;
SELECT COUNT(*) FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT COUNT(*) FROM Products;
SELECT COUNT(*) FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_price FROM Products WHERE product_name = 'Monitor';
SELECT product_price FROM Products WHERE product_name = 'Monitor';
SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products;
SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products;
SELECT AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'Clothes';
SELECT AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'Clothes';
SELECT COUNT(*)  FROM Products  WHERE product_type_code = 'hardware';
SELECT COUNT(*)  FROM Products  WHERE product_type_code = 'Hardware';
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' AND product_price > (     SELECT AVG(product_price)     FROM Products     WHERE product_type_code = 'hardware' );
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (     SELECT AVG(product_price)     FROM Products     WHERE product_type_code = 'Hardware' );
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_name  FROM Products  WHERE product_type_code = 'Clothes'  ORDER BY product_price DESC  LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
SELECT product_name FROM Products ORDER BY product_price DESC;
SELECT product_name FROM Products ORDER BY product_price DESC;
SELECT * FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC;
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_type_code, COUNT(product_id) AS product_count FROM Products GROUP BY product_type_code;
SELECT product_type_code, COUNT(product_id) AS product_count FROM Products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC LIMIT 1;
SELECT product_type_code, COUNT(*) AS frequency FROM Products GROUP BY product_type_code ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) AS count FROM Customers GROUP BY payment_method_code ORDER BY count DESC LIMIT 1;
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customer_name FROM Customers WHERE payment_method_code = (     SELECT payment_method_code     FROM Customers     GROUP BY payment_method_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT customer_name FROM Customers WHERE payment_method_code = (     SELECT payment_method_code     FROM Customers     GROUP BY payment_method_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT DISTINCT payment_method_code FROM Customers;
SELECT DISTINCT payment_method_code FROM Customers;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM Customer_Orders;
SELECT COUNT(*) FROM Customer_Orders;
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy';
SELECT o.order_id, o.order_date, o.order_status_code FROM Customer_Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy';
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS number_of_orders FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id;
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS number_of_orders FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT order_status_code, COUNT(*) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code;
SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code;
SELECT order_status_code, COUNT(*) as count FROM Customer_Orders GROUP BY order_status_code ORDER BY count DESC LIMIT 1;
SELECT order_status_code, COUNT(*) AS frequency FROM Customer_Orders GROUP BY order_status_code ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT product_name FROM Products WHERE product_id NOT IN (     SELECT product_id     FROM Order_Items );
SELECT product_name  FROM Products  WHERE product_id NOT IN (     SELECT product_id      FROM Order_Items );
SELECT SUM(CAST(order_quantity AS INT)) AS total_monitors_ordered FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor';
SELECT SUM(CAST(order_quantity AS INT)) AS total_monitors_ordered FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor';
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders;
SELECT COUNT(DISTINCT customer_id)  FROM Customer_Orders;
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT DISTINCT o.order_date, o.order_id FROM Customer_Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING MAX(oi.order_quantity) > 6 OR COUNT(oi.product_id) > 3;
SELECT o.order_id, o.order_date FROM Customer_Orders o JOIN (     SELECT order_id     FROM Order_Items     WHERE CAST(order_quantity AS INTEGER) > 6     UNION     SELECT order_id     FROM Order_Items     GROUP BY order_id     HAVING COUNT(product_id) > 3 ) i ON o.order_id = i.order_id;
SELECT COUNT(*) FROM building;
SELECT COUNT(*) FROM building;
SELECT Name FROM building ORDER BY Number_of_Stories ASC;
SELECT Name FROM building ORDER BY Number_of_Stories ASC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980;
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980;
SELECT AVG(Population) FROM region;
SELECT AVG(Population) AS Average_Population FROM region;
SELECT Name FROM region ORDER BY Name ASC;
SELECT Name FROM region ORDER BY Name ASC;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1;
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT building.Name AS BuildingName, region.Name AS RegionName FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name AS BuildingName, region.Name AS RegionName FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(b.Building_ID) > 1;
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(b.Building_ID) > 1;
SELECT r.Capital FROM region r JOIN (     SELECT Region_ID, COUNT(*) AS BuildingCount     FROM building     GROUP BY Region_ID     ORDER BY BuildingCount DESC     LIMIT 1 ) b ON r.Region_ID = b.Region_ID;
SELECT r.Capital FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID ORDER BY COUNT(b.Building_ID) DESC LIMIT 1;
SELECT building.Address, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Address, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo';
SELECT b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo';
SELECT Completed_Year, COUNT(Building_ID) AS Number_of_Buildings FROM building GROUP BY Completed_Year;
SELECT Completed_Year, COUNT(Building_ID) AS Number_of_Buildings FROM building GROUP BY Completed_Year;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Completed_Year, COUNT(*) AS Building_Count FROM building GROUP BY Completed_Year ORDER BY Building_Count DESC LIMIT 1;
SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Building_ID IS NULL;
SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Building_ID IS NULL;
SELECT DISTINCT b1.Completed_Year FROM building b1 JOIN building b2 ON b1.Completed_Year = b2.Completed_Year WHERE b1.Number_of_Stories > 20 AND b2.Number_of_Stories < 15;
SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories < 15;
SELECT DISTINCT Address FROM building;
SELECT DISTINCT Address FROM building;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT COUNT(*) FROM Services;
SELECT COUNT(*) FROM Services;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1;
SELECT s.Service_ID, s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch';
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch';
SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Services.Service_ID HAVING COUNT(Customers_and_Services.Customers_and_Services_ID) > 3;
SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID GROUP BY S.Service_ID HAVING COUNT(CS.Customer_ID) > 3;
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(cs.Service_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(cs.Service_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN (     SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS ServiceCount     FROM Customers_and_Services     GROUP BY Customer_ID     ORDER BY ServiceCount DESC     LIMIT 1 ) AS subq ON c.Customer_ID = subq.Customer_ID;
SELECT c.Customer_Details FROM Customers c JOIN (     SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS ServiceCount     FROM Customers_and_Services     GROUP BY Customer_ID     ORDER BY ServiceCount DESC     LIMIT 1 ) AS subquery ON c.Customer_ID = subquery.Customer_ID;
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (     SELECT DISTINCT Customer_ID     FROM Customers_and_Services );
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (     SELECT DISTINCT Customer_ID     FROM Customers_and_Services );
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (     SELECT Customer_ID     FROM Customers_and_Services     WHERE Service_ID = (         SELECT Service_ID         FROM Customers_and_Services         GROUP BY Service_ID         ORDER BY COUNT(*) ASC         LIMIT 1     ) );
SELECT DISTINCT Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Services.Service_ID IN (     SELECT Service_ID     FROM Customers_and_Services     GROUP BY Service_ID     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT COUNT(DISTINCT Customers_and_Services_Details)  FROM Customers_and_Services;
SELECT COUNT(*)  FROM Customers_and_Services;
SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%';
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%';
SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good';
SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID LEFT JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good';
SELECT DISTINCT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID AND c.Customer_ID = ci.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch' AND ci.Status_Code = 'bad';
SELECT DISTINCT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID AND c.Customer_ID = ci.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch' AND ci.Status_Code = 'bad';
SELECT DISTINCT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details LIKE '%15 ij%';
SELECT DISTINCT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij';
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID WHERE ci.Status_Code = 'Stuck' AND ci.Services_and_Channels_Details = 'bad';
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID WHERE ci.Status_Code = 'Stuck' AND ci.Services_and_Channels_Details = 'bad';
SELECT COUNT(*)  FROM Integration_Platform  WHERE Integration_Platform_Details LIKE '%successful%';
SELECT COUNT(*)  FROM Integration_Platform  WHERE Integration_Platform_Details LIKE '%Success%';
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE ip.Integration_Platform_Details LIKE '%failed%';
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE ip.Integration_Platform_Details = 'Fail';
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (     SELECT Service_ID     FROM Customers_and_Services );
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (     SELECT Service_ID     FROM Customers_and_Services );
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code;
SELECT DISTINCT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%unsatisfied%';
SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%';
SELECT COUNT(*) FROM Vehicles;
SELECT COUNT(*) FROM Vehicles;
SELECT name FROM Vehicles ORDER BY Model_year DESC;
SELECT name FROM Vehicles ORDER BY Model_year DESC;
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT v.name, v.Type_of_powertrain, v.Annual_fuel_cost FROM Vehicles v WHERE v.Model_year IN (2013, 2014);
SELECT v.name, v.Type_of_powertrain, v.Annual_fuel_cost FROM Vehicles v WHERE v.Model_year IN (2013, 2014);
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2;
SELECT DISTINCT Type_of_powertrain FROM Vehicles v1 JOIN Vehicles v2 ON v1.Type_of_powertrain = v2.Type_of_powertrain WHERE v1.Model_year = 2013 AND v2.Model_year = 2014;
SELECT Type_of_powertrain, COUNT(*) AS Number_of_vehicles FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, COUNT(*) AS vehicle_count FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, COUNT(*) AS vehicle_count FROM Vehicles GROUP BY Type_of_powertrain ORDER BY vehicle_count DESC LIMIT 1;
SELECT Type_of_powertrain, COUNT(*) AS count FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count DESC LIMIT 1;
SELECT MIN(Annual_fuel_cost) AS Min_Annual_Fuel_Cost,         MAX(Annual_fuel_cost) AS Max_Annual_Fuel_Cost,         AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost  FROM Vehicles;
SELECT MIN(Annual_fuel_cost) AS Min_Annual_Fuel_Cost,        MAX(Annual_fuel_cost) AS Max_Annual_Fuel_Cost,        AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles;
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2;
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1;
SELECT AVG(age)  FROM Customers  WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT AVG(age)  FROM Customers  WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT * FROM Discount;
SELECT * FROM Discount;
SELECT Vehicles.name, SUM(Renting_history.total_hours) AS total_renting_hours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name;
SELECT v.name, SUM(r.total_hours) AS total_rental_hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name;
SELECT v.name FROM Vehicles v LEFT JOIN Renting_history rh ON v.id = rh.vehicles_id WHERE rh.id IS NULL;
SELECT name  FROM Vehicles  WHERE id NOT IN (SELECT vehicles_id FROM Renting_history);
SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2;
SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.id HAVING COUNT(rh.id) >= 2;
SELECT V.name, V.Model_year FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id GROUP BY V.id ORDER BY COUNT(RH.id) DESC LIMIT 1;
SELECT V.name, V.Model_year FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id GROUP BY V.id ORDER BY COUNT(RH.id) DESC LIMIT 1;
SELECT Vehicles.name FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.name ORDER BY SUM(Renting_history.total_hours) DESC;
SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY SUM(Renting_history.total_hours) DESC;
SELECT d.name FROM Discount d JOIN Renting_history rh ON d.id = rh.discount_id GROUP BY d.name ORDER BY COUNT(rh.id) DESC LIMIT 1;
SELECT d.name FROM Discount d JOIN Renting_history rh ON d.id = rh.discount_id GROUP BY d.id ORDER BY COUNT(rh.id) DESC LIMIT 1;
SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id WHERE RH.total_hours > 30;
SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id GROUP BY V.id HAVING SUM(RH.total_hours) > 30;
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Avg_City_Fuel_Rate, AVG(Highway_fuel_economy_rate) AS Avg_Highway_Fuel_Rate FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain,         AVG(City_fuel_economy_rate) AS Avg_City_Fuel_Economy,         AVG(Highway_fuel_economy_rate) AS Avg_Highway_Fuel_Economy FROM Vehicles GROUP BY Type_of_powertrain;
SELECT AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans;
SELECT AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans;
SELECT S.student_id, S.bio_data FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) >= 2 INTERSECT SELECT S.student_id, S.bio_data FROM Students S LEFT JOIN Detention D ON S.student_id = D.student_id GROUP BY S.student_id HAVING COUNT(D.detention_id) < 2;
SELECT S.student_id, S.bio_data FROM Students S WHERE (     SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id ) >= 2 OR (     SELECT COUNT(*) FROM Detention D WHERE D.student_id = S.student_id ) < 2;
SELECT DISTINCT teacher_details FROM Teachers WHERE teacher_id IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE '%data%' ) AND teacher_id NOT IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE 'net%' );
SELECT DISTINCT T.teacher_details FROM Teachers T JOIN Classes C1 ON T.teacher_id = C1.teacher_id WHERE C1.class_details LIKE '%data%' AND T.teacher_id NOT IN (     SELECT teacher_id     FROM Classes C2     WHERE C2.class_details LIKE 'net%' );
SELECT bio_data FROM Students WHERE student_id NOT IN (     SELECT student_id     FROM Detention ) AND student_id NOT IN (     SELECT student_id     FROM Student_Loans );
SELECT bio_data FROM Students WHERE student_id NOT IN (     SELECT student_id     FROM Detention     UNION     SELECT student_id     FROM Student_Loans );
SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL JOIN (     SELECT student_id     FROM Achievements     GROUP BY student_id     HAVING COUNT(achievement_id) >= 2 ) A ON SL.student_id = A.student_id;
SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL JOIN (     SELECT student_id     FROM Achievements     GROUP BY student_id     HAVING COUNT(achievement_id) >= 2 ) A ON SL.student_id = A.student_id;
SELECT teacher_details, teacher_id FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY Teachers.teacher_id ORDER BY COUNT(Classes.class_id) DESC LIMIT 1;
SELECT teacher_details, teacher_id FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY Teachers.teacher_id ORDER BY COUNT(Classes.class_id) DESC LIMIT 1;
SELECT DISTINCT detention_type_description FROM Ref_Detention_Type JOIN Detention ON Ref_Detention_Type.detention_type_code = Detention.detention_type_code;
SELECT DISTINCT detention_type_description FROM Ref_Detention_Type JOIN Detention ON Ref_Detention_Type.detention_type_code = Detention.detention_type_code;
SELECT      Students.student_details,      Ref_Address_Types.address_type_description FROM      Students JOIN      Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN      Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code;
SELECT      Students.student_id,      Students.bio_data,      Students.student_details,      Ref_Address_Types.address_type_description FROM      Students JOIN      Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN      Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code;
SELECT a.address_details, s.bio_data FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT s.student_id, s.bio_data, a.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT COUNT(*) AS student_count, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1;
SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring BM ON S.student_id = BM.student_id WHERE BM.behaviour_monitoring_details IN (     SELECT behaviour_monitoring_details     FROM Behaviour_Monitoring     GROUP BY behaviour_monitoring_details     HAVING COUNT(*) = (         SELECT MAX(count)         FROM (             SELECT COUNT(*) AS count             FROM Behaviour_Monitoring             GROUP BY behaviour_monitoring_details         )     )     AND COUNT(*) = 3 )
SELECT S.bio_data, S.student_details FROM Students S JOIN (     SELECT BM.student_id     FROM Behaviour_Monitoring BM     GROUP BY BM.behaviour_monitoring_details     HAVING COUNT(BM.behaviour_monitoring_details) = (         SELECT MAX(count_details)         FROM (             SELECT COUNT(BM2.behaviour_monitoring_details) AS count_details             FROM Behaviour_Monitoring BM2             GROUP BY BM2.behaviour_monitoring_details         )     ) AND COUNT(BM.behaviour_monitoring_details) = 3 ) AS MostCommonResult ON S.student_id = MostCommonResult.student_id;
SELECT S.student_id, S.bio_data FROM Students S WHERE S.student_id IN (     SELECT BM.student_id     FROM Behaviour_Monitoring BM     GROUP BY BM.student_id     HAVING COUNT(*) = (         SELECT MAX(counts)         FROM (             SELECT BM.student_id, COUNT(*) AS counts             FROM Behaviour_Monitoring BM             GROUP BY BM.student_id, BM.behaviour_monitoring_details         )         WHERE student_id = BM.student_id     ) )
SELECT bio_data FROM Students WHERE student_id IN (     SELECT student_id     FROM Behaviour_Monitoring     GROUP BY behaviour_monitoring_details     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Students.bio_data, Student_Events.event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT S.bio_data, SE.event_date FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id;
SELECT COUNT(DISTINCT se.student_id) AS student_count,         se.event_type_code,         ret.event_type_description FROM Student_Events se JOIN Ref_Event_Types ret ON se.event_type_code = ret.event_type_code GROUP BY se.event_type_code ORDER BY student_count DESC LIMIT 1;
SELECT      COUNT(DISTINCT se.student_id) AS num_students,     se.event_type_code,     ret.event_type_description FROM      Student_Events se JOIN      Ref_Event_Types ret ON se.event_type_code = ret.event_type_code GROUP BY      se.event_type_code ORDER BY      num_students DESC LIMIT 1;
SELECT a.achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code;
SELECT A.achievement_details, R.achievement_type_description FROM Achievements A JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code;
SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id NOT IN (     SELECT student_id     FROM Achievements );
SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id LEFT JOIN Achievements a ON s.student_id = a.student_id WHERE a.achievement_id IS NULL;
SELECT date_of_transcript, transcript_details FROM Transcripts;
SELECT date_of_transcript, transcript_details FROM Transcripts;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT datetime_detention_start, datetime_detention_end FROM Detention;
SELECT datetime_detention_start, datetime_detention_end FROM Detention;
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%';
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%';
SELECT      T.teacher_details,      S.student_details FROM      Teachers T JOIN      Classes C ON T.teacher_id = C.teacher_id JOIN      Students S ON C.student_id = S.student_id;
SELECT t.teacher_details, s.student_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id;
SELECT teacher_id, COUNT(DISTINCT class_id) AS course_count FROM Classes GROUP BY teacher_id ORDER BY course_count DESC LIMIT 1;
SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1;
SELECT MAX(course_count) AS max_courses, student_id FROM (     SELECT student_id, COUNT(class_id) AS course_count     FROM Classes     GROUP BY student_id ) WHERE course_count = (SELECT MAX(course_count) FROM (SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id))
SELECT student_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1;
SELECT s.student_id, s.student_details FROM Students s JOIN Classes c1 ON s.student_id = c1.student_id JOIN Classes c2 ON s.student_id = c2.student_id AND c1.class_id != c2.class_id GROUP BY s.student_id HAVING COUNT(DISTINCT c1.class_id) = 2;
SELECT s.student_id, s.student_details FROM Students s JOIN Classes c1 ON s.student_id = c1.student_id JOIN Classes c2 ON s.student_id = c2.student_id AND c1.class_id != c2.class_id GROUP BY s.student_id HAVING COUNT(DISTINCT c1.class_id) = 2;
SELECT dt.detention_type_code, rdt.detention_type_description FROM Detention dt JOIN Ref_Detention_Type rdt ON dt.detention_type_code = rdt.detention_type_code GROUP BY dt.detention_type_code ORDER BY COUNT(dt.detention_id) ASC LIMIT 1;
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (     SELECT detention_type_code     FROM Detention     GROUP BY detention_type_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT S.bio_data, S.student_details FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (     SELECT AVG(amount_of_loan)     FROM Student_Loans );
SELECT S.bio_data, S.student_details FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (     SELECT AVG(amount_of_loan)     FROM Student_Loans );
SELECT MIN(date_of_loan) FROM Student_Loans;
SELECT MIN(date_of_loan) FROM Student_Loans;
SELECT S.bio_data FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans);
SELECT S.bio_data FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans);
SELECT T.date_of_transcript FROM Transcripts T JOIN Students S ON T.student_id = S.student_id JOIN (     SELECT student_id, MAX(amount_of_loan) AS max_loan     FROM Student_Loans     GROUP BY student_id ) SL ON S.student_id = SL.student_id WHERE SL.max_loan = (     SELECT MAX(amount_of_loan)     FROM Student_Loans );
SELECT T.date_of_transcript FROM Transcripts T JOIN Students S ON T.student_id = S.student_id JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan = (     SELECT MAX(amount_of_loan)     FROM Student_Loans );
SELECT DISTINCT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN Students S ON C.student_id = S.student_id JOIN Transcripts TR ON S.student_id = TR.student_id WHERE TR.date_of_transcript = (     SELECT MIN(date_of_transcript)     FROM Transcripts );
SELECT DISTINCT teacher_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id JOIN Transcripts ON Students.student_id = Transcripts.student_id WHERE Transcripts.date_of_transcript = (     SELECT MIN(date_of_transcript)     FROM Transcripts );
SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id;
SELECT student_id, SUM(amount_of_loan) AS total_loan_amount FROM Student_Loans GROUP BY student_id;
SELECT      s.student_id,      s.bio_data,      COUNT(c.class_id) AS course_count FROM      Students s JOIN      Classes c ON s.student_id = c.student_id GROUP BY      s.student_id,      s.bio_data;
SELECT      s.student_id,      s.bio_data,      COUNT(c.class_id) AS number_of_courses FROM      Students s JOIN      Classes c ON s.student_id = c.student_id GROUP BY      s.student_id;
SELECT COUNT(DISTINCT student_id)  FROM Detention;
SELECT COUNT(DISTINCT student_id)  FROM Detention;
SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (     SELECT address_type_code     FROM Students_Addresses     GROUP BY address_type_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Rat.address_type_code, Rat.address_type_description FROM Ref_Address_Types Rat JOIN Students_Addresses Sa ON Rat.address_type_code = Sa.address_type_code GROUP BY Rat.address_type_code, Rat.address_type_description ORDER BY COUNT(Sa.student_address_id) DESC LIMIT 1;
SELECT DISTINCT S.bio_data FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.student_loan_id IS NULL;
SELECT S.bio_data FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.student_loan_id IS NULL;
SELECT sa.date_from, sa.date_to FROM Students_Addresses sa JOIN Students s ON sa.student_id = s.student_id JOIN (     SELECT student_id     FROM Transcripts     GROUP BY student_id     HAVING COUNT(transcript_id) = 2 ) t ON s.student_id = t.student_id;
SELECT sa.date_from, sa.date_to FROM Students_Addresses sa JOIN Students s ON sa.student_id = s.student_id JOIN (     SELECT student_id     FROM Transcripts     GROUP BY student_id     HAVING COUNT(transcript_id) = 2 ) t ON s.student_id = t.student_id;
SELECT datetime_detention_start FROM Detention;
SELECT datetime_detention_start FROM Detention;
SELECT Name FROM Author;
SELECT Name FROM Author;
SELECT Name, Address FROM Client;
SELECT Name, Address FROM Client;
SELECT Title, ISBN, SalePrice FROM Book;
SELECT Title, ISBN, SalePrice FROM Book;
SELECT COUNT(*) FROM Book;
SELECT COUNT(*) FROM Book;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Client;
SELECT COUNT(*) FROM Client;
SELECT Name, Address FROM Client ORDER BY Name ASC;
SELECT Name, Address FROM Client ORDER BY Name ASC;
SELECT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor;
SELECT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor;
SELECT Orders.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
SELECT a.Name, COUNT(b.ISBN) AS NumberOfBooks FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author JOIN Book b ON ab.ISBN = b.ISBN GROUP BY a.Name;
SELECT Author.Name, COUNT(Book.ISBN) AS BooksWritten FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN GROUP BY Author.Name;
SELECT Book.ISBN, COUNT(Books_Order.IdOrder) AS NumOrders FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN;
SELECT Book.ISBN, COUNT(Books_Order.ISBN) AS TimesOrdered FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN;
SELECT ISBN, SUM(amount) AS TotalAmount FROM Books_Order GROUP BY ISBN;
SELECT ISBN, SUM(amount) AS TotalAmountOrdered FROM Books_Order GROUP BY ISBN;
SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN ORDER BY COUNT(BO.IdOrder) DESC LIMIT 1;
SELECT Title FROM Book JOIN (     SELECT ISBN, SUM(amount) as TotalOrdered     FROM Books_Order     GROUP BY ISBN     ORDER BY TotalOrdered DESC     LIMIT 1 ) AS MostOrderedBook ON Book.ISBN = MostOrderedBook.ISBN;
SELECT B.Title, B.PurchasePrice FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN ORDER BY SUM(BO.amount) DESC LIMIT 1;
SELECT B.Title, B.PurchasePrice FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN ORDER BY SUM(BO.amount) DESC LIMIT 1;
SELECT DISTINCT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN;
SELECT DISTINCT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN;
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient;
SELECT DISTINCT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient;
SELECT Client.Name, COUNT(Orders.IdOrder) AS NumberOfOrders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name;
SELECT c.Name, COUNT(o.IdOrder) AS NumOrders FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.IdClient ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.IdClient ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
SELECT c.Name, SUM(bo.amount) AS TotalBooksOrdered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name;
SELECT c.Name, SUM(bo.amount) AS TotalBooksOrdered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name;
SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.Name ORDER BY SUM(BO.amount) DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.IdClient ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT Title FROM Book WHERE ISBN NOT IN (     SELECT ISBN     FROM Books_Order );
SELECT Title FROM Book WHERE ISBN NOT IN (     SELECT ISBN     FROM Books_Order );
SELECT Name  FROM Client  WHERE IdClient NOT IN (SELECT DISTINCT IdClient FROM Orders);
SELECT Name  FROM Client  WHERE IdClient NOT IN (SELECT DISTINCT IdClient FROM Orders);
SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book;
SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book;
SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book;
SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book;
SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book;
SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book;
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);
SELECT AVG(SalePrice)  FROM Book  WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell');
SELECT AVG(Book.SalePrice)  FROM Book  JOIN Author_Book ON Book.ISBN = Author_Book.ISBN  JOIN Author ON Author_Book.Author = Author.idAuthor  WHERE Author.Name = 'George Orwell';
SELECT Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato';
SELECT Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato';
SELECT Title FROM Book JOIN Author ON Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' ORDER BY Book.SalePrice ASC LIMIT 1;
SELECT Title FROM Book JOIN Author ON Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' ORDER BY Book.SalePrice ASC LIMIT 1;
SELECT Title  FROM Book  WHERE Author = 'Plato'  AND SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND Book.SalePrice < (     SELECT AVG(SalePrice)     FROM Book );
SELECT Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Book.Title = 'Pride and Prejudice';
SELECT Author.Name FROM Author JOIN Book ON Author.idAuthor = Book.Author WHERE Book.Title = 'Pride and Prejudice';
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%';
SELECT Title FROM Book WHERE Author LIKE '%Plato%';
SELECT COUNT(*)  FROM Orders  JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder  JOIN Book ON Books_Order.ISBN = Book.ISBN  WHERE Book.Title = 'Pride and Prejudice';
SELECT COUNT(*)  FROM Orders  JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder  JOIN Book ON Books_Order.ISBN = Book.ISBN  WHERE Book.Title = 'Pride and Prejudice';
SELECT o.IdOrder FROM Orders o JOIN Books_Order bo1 ON o.IdOrder = bo1.IdOrder JOIN Book b1 ON bo1.ISBN = b1.ISBN JOIN Books_Order bo2 ON o.IdOrder = bo2.IdOrder JOIN Book b2 ON bo2.ISBN = b2.ISBN WHERE b1.Title = 'Pride and Prejudice' AND b2.Title = 'The Little Prince';
SELECT o.IdOrder FROM Orders o JOIN Books_Order bo1 ON o.IdOrder = bo1.IdOrder JOIN Book b1 ON bo1.ISBN = b1.ISBN JOIN Books_Order bo2 ON o.IdOrder = bo2.IdOrder JOIN Book b2 ON bo2.ISBN = b2.ISBN WHERE b1.Title = 'Pride and Prejudice' AND b2.Title = 'The Little Prince';
SELECT DISTINCT b.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient JOIN Book b ON bo.ISBN = b.ISBN WHERE c.Name IN ('Peter Doe', 'James Smith') GROUP BY b.ISBN HAVING COUNT(DISTINCT c.Name) = 2;
SELECT DISTINCT b.ISBN FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name IN ('Peter Doe', 'James Smith') GROUP BY b.ISBN HAVING COUNT(DISTINCT c.Name) = 2;
SELECT DISTINCT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND B.ISBN NOT IN (     SELECT B.ISBN     FROM Book B     JOIN Books_Order BO ON B.ISBN = BO.ISBN     JOIN Orders O ON BO.IdOrder = O.IdOrder     JOIN Client C ON O.IdClient = C.IdClient     WHERE C.Name = 'James Smith' );
SELECT DISTINCT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND b.ISBN NOT IN (     SELECT b.ISBN     FROM Book b     JOIN Books_Order bo ON b.ISBN = bo.ISBN     JOIN Orders o ON bo.IdOrder = o.IdOrder     JOIN Client c ON o.IdClient = c.IdClient     WHERE c.Name = 'James Smith' );
SELECT DISTINCT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice';
SELECT COUNT(*) FROM book;
SELECT Title FROM book ORDER BY Title ASC;
SELECT Title FROM book ORDER BY Pages DESC;
SELECT Type, Release FROM book;
SELECT Book_ID, MAX(Chapters) AS Max_Chapters, MIN(Chapters) AS Min_Chapters FROM book GROUP BY Book_ID;
SELECT Title FROM book WHERE Type != 'Poet';
SELECT AVG(Rating) FROM review;
SELECT book.Title, review.Rating FROM book JOIN review ON book.Book_ID = review.Book_ID;
SELECT r.Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE b.Chapters = (SELECT MAX(Chapters) FROM book);
SELECT Rank FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE book.Pages = (SELECT MIN(Pages) FROM book);
SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Rank = (SELECT MIN(Rank) FROM review);
SELECT AVG(Readers_in_Million)  FROM review  JOIN book ON review.Book_ID = book.Book_ID  WHERE book.Type = 'Novel';
SELECT Type, COUNT(*) AS NumberOfBooks FROM book GROUP BY Type;
SELECT Type, COUNT(*) AS Frequency FROM book GROUP BY Type ORDER BY Frequency DESC LIMIT 1;
SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3;
SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC;
SELECT b.Title, b.Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC;
SELECT COUNT(*)  FROM book  WHERE Book_ID NOT IN (SELECT Book_ID FROM review);
SELECT DISTINCT Type FROM book WHERE Type IN (     SELECT Type     FROM book     WHERE Chapters > 75 ) AND Type IN (     SELECT Type     FROM book     WHERE Chapters < 50 );
SELECT COUNT(DISTINCT Type) FROM book;
SELECT b.Type, b.Title FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Rating IS NULL;
SELECT COUNT(*) FROM customer;
SELECT COUNT(*) FROM customer;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT Nationality, Card_Credit FROM customer;
SELECT Nationality, Card_Credit FROM customer;
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia');
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia');
SELECT AVG(Card_Credit)  FROM customer  WHERE Level_of_Membership > 1;
SELECT AVG(Card_Credit)  FROM customer  WHERE Level_of_Membership > 1;
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1;
SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer);
SELECT Nationality, COUNT(Customer_ID) AS Number_of_Customers FROM customer GROUP BY Nationality;
SELECT Nationality, COUNT(Customer_ID) AS Number_of_Customers FROM customer GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM customer GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS CustomerCount FROM customer GROUP BY Nationality ORDER BY CustomerCount DESC LIMIT 1;
SELECT DISTINCT Nationality FROM customer WHERE Nationality IN (     SELECT Nationality     FROM customer     WHERE Card_Credit < 50 ) AND Nationality IN (     SELECT Nationality     FROM customer     WHERE Card_Credit > 75 );
SELECT DISTINCT Nationality FROM customer WHERE Nationality IN (     SELECT Nationality     FROM customer     WHERE Card_Credit > 50 ) AND Nationality IN (     SELECT Nationality     FROM customer     WHERE Card_Credit < 75 );
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID;
SELECT c.Name, co.Dish_Name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID;
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC;
SELECT c.Name, co.Dish_Name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID ORDER BY co.Quantity DESC;
SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name;
SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name;
SELECT c.Customer_ID, c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID, c.Name HAVING SUM(co.Quantity) > 1;
SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1;
SELECT DISTINCT Manager FROM branch;
SELECT DISTINCT Manager FROM branch;
SELECT Name FROM customer WHERE Customer_ID NOT IN (     SELECT DISTINCT Customer_ID     FROM customer_order );
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order);
SELECT COUNT(*) FROM member;
SELECT Name FROM member ORDER BY Age ASC;
SELECT Name, Nationality FROM member;
SELECT Name FROM member WHERE Nationality != 'England';
SELECT Name FROM member WHERE Age IN (19, 20);
SELECT Name FROM member ORDER BY Age DESC LIMIT 1;
SELECT Nationality, COUNT(Member_ID) AS NumberOfMembers FROM member GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2;
SELECT m.Name AS Club_Leader_Name, c.Club_Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID;
SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100;
SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < '2018';
SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Club_Name = 'Houston';
SELECT Name FROM member WHERE Member_ID NOT IN (     SELECT Member_ID     FROM club_leader );
SELECT DISTINCT Nationality FROM member WHERE Nationality IN (     SELECT Nationality     FROM member     WHERE Age > 22 ) AND Nationality IN (     SELECT Nationality     FROM member     WHERE Age < 19 );
SELECT AVG(m.Age)  FROM member m  JOIN club_leader cl ON m.Member_ID = cl.Member_ID;
SELECT Club_Name  FROM club  WHERE Club_Name LIKE '%state%';
SELECT Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection';
SELECT Collection_Subsets.Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection';
SELECT DISTINCT Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID;
SELECT Document_Subset_Name FROM Document_Subsets;
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Object_ID FROM Document_Objects;
SELECT Document_Object_ID FROM Document_Objects;
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT DISTINCT Document_Objects.Owner FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Braeden Collection';
SELECT Parent.Owner FROM Document_Objects AS Child JOIN Document_Objects AS Parent ON Child.Parent_Document_Object_ID = Parent.Document_Object_ID WHERE Child.Owner = 'Marlin';
SELECT DISTINCT d.Parent_Document_Object_ID, d2.Owner FROM Document_Objects d JOIN Document_Objects d2 ON d.Parent_Document_Object_ID = d2.Document_Object_ID WHERE d.Owner = 'Marlin';
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL;
SELECT DISTINCT d.Description FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL;
SELECT COUNT(*)  FROM Document_Objects  WHERE Owner = 'Marlin';
SELECT COUNT(*)  FROM Document_Objects  WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (     SELECT Parent_Document_Object_ID     FROM Document_Objects     WHERE Parent_Document_Object_ID IS NOT NULL );
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (     SELECT DISTINCT Parent_Document_Object_ID     FROM Document_Objects     WHERE Parent_Document_Object_ID IS NOT NULL );
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Child_Document_Count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID;
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Child_Document_Count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID;
SELECT Collection_Name FROM Collections;
SELECT Collection_Name FROM Collections;
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT c2.Collection_Name FROM Collections c1 JOIN Collections c2 ON c1.Parent_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Nice';
SELECT c1.Collection_Name FROM Collections c1 JOIN Collections c2 ON c1.Collection_ID = c2.Parent_Collection_ID WHERE c2.Collection_Name = 'Nice';
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (     SELECT DISTINCT Parent_Collection_ID     FROM Collections     WHERE Parent_Collection_ID IS NOT NULL );
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (     SELECT Parent_Collection_ID     FROM Collections     WHERE Parent_Collection_ID IS NOT NULL );
SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1;
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1;
SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (     SELECT Collection_ID     FROM Collections     WHERE Collection_Name = 'Best' );
SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (     SELECT Collection_ID     FROM Collections     WHERE Collection_Name = 'Best' );
SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Related_Document_Object_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom';
SELECT DISTINCT dsm.Related_Document_Object_ID FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID WHERE do.Owner = 'Ransom';
SELECT      Collection_Subsets.Collection_Subset_ID,      Collection_Subsets.Collection_Subset_Name,      COUNT(Collection_Subset_Members.Collection_ID) AS Number_of_Collections FROM      Collection_Subsets JOIN      Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY      Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name;
SELECT      csm.Collection_Subset_ID,      cs.Collection_Subset_Name,      COUNT(DISTINCT csm.Collection_ID) AS Number_of_Collections FROM      Collection_Subset_Members csm JOIN      Collection_Subsets cs ON csm.Collection_Subset_ID = cs.Collection_Subset_ID GROUP BY      csm.Collection_Subset_ID,      cs.Collection_Subset_Name;
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Child_Count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY Child_Count DESC LIMIT 1;
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Children_Count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID;
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Num_Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Num_Related_Documents ASC LIMIT 1;
SELECT Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID ORDER BY COUNT(Documents_in_Collections.Document_Object_ID) ASC LIMIT 1;
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Num_Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) BETWEEN 2 AND 4;
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Items_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Items_Count BETWEEN 2 AND 4;
SELECT DISTINCT d.Owner FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Related_Document_Object_ID JOIN Document_Objects d2 ON dsm.Document_Object_ID = d2.Document_Object_ID WHERE d2.Owner = 'Braeden';
SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (     SELECT Related_Document_Object_ID     FROM Document_Subset_Members     WHERE Document_Object_ID IN (         SELECT Document_Object_ID         FROM Document_Objects         WHERE Owner = 'Braeden'     ) ) AND Owner != 'Braeden';
SELECT DISTINCT Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden';
SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden';
SELECT      ds.Document_Subset_ID,      ds.Document_Subset_Name,      COUNT(DISTINCT dom.Document_Object_ID) AS Num_Documents FROM      Document_Subsets ds JOIN      Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN      Document_Objects dom ON dsm.Related_Document_Object_ID = dom.Document_Object_ID GROUP BY      ds.Document_Subset_ID,      ds.Document_Subset_Name;
SELECT      ds.Document_Subset_ID,      ds.Document_Subset_Name,      COUNT(DISTINCT dom.Document_Object_ID) AS Number_of_Different_Documents FROM      Document_Subsets ds JOIN      Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN      Document_Objects dom ON dsm.Document_Object_ID = dom.Document_Object_ID GROUP BY      ds.Document_Subset_ID,      ds.Document_Subset_Name;
SELECT      Document_Subsets.Document_Subset_ID,      Document_Subsets.Document_Subset_Name,      COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Num_Documents FROM      Document_Subsets JOIN      Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN      Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY      Document_Subsets.Document_Subset_ID,      Document_Subsets.Document_Subset_Name ORDER BY      Num_Documents DESC LIMIT 1;
SELECT      Document_Subsets.Document_Subset_ID,      Document_Subsets.Document_Subset_Name,      COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS Num_Documents FROM      Document_Subsets JOIN      Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY      Document_Subsets.Document_Subset_ID,      Document_Subsets.Document_Subset_Name ORDER BY      Num_Documents DESC LIMIT 1;
SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000';
SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000';
SELECT d.Document_Object_ID, ds.Document_Subset_Name FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Related_Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID;
SELECT d.Document_Object_ID, ds.Document_Subset_Name FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Related_Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID;
SELECT DISTINCT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE d.Owner = 'Ransom';
SELECT c.Collection_Name FROM Document_Objects AS do JOIN Documents_in_Collections AS dic ON do.Document_Object_ID = dic.Document_Object_ID JOIN Collections AS c ON dic.Collection_ID = c.Collection_ID WHERE do.Owner = 'Ransom';
SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID;
SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID;
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best';
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best';
SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best';
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best';
SELECT C.Collection_Name, C.Collection_ID, COUNT(DIC.Document_Object_ID) AS Num_Documents FROM Collections C JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID GROUP BY C.Collection_ID ORDER BY Num_Documents DESC LIMIT 1;
SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections C JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID, C.Collection_Name ORDER BY Document_Count DESC LIMIT 1;
SELECT DISTINCT doc.Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects doc ON dsm.Document_Object_ID = doc.Document_Object_ID JOIN Documents_in_Collections dic ON doc.Document_Object_ID = dic.Document_Object_ID JOIN Collections col ON dic.Collection_ID = col.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND col.Collection_Name = 'Best';
SELECT DISTINCT d.Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects d ON dsm.Document_Object_ID = d.Document_Object_ID JOIN Documents_in_Collections dic ON d.Document_Object_ID = dic.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best';
SELECT DISTINCT doc.Document_Object_ID FROM Document_Objects doc JOIN Documents_in_Collections dic ON doc.Document_Object_ID = dic.Document_Object_ID JOIN Collections col ON dic.Collection_ID = col.Collection_ID LEFT JOIN Document_Subset_Members dsm ON doc.Document_Object_ID = dsm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE col.Collection_Name = 'Best' AND (ds.Document_Subset_Name IS NULL OR ds.Document_Subset_Name <> 'Best for 2000');
SELECT DISTINCT doc.Document_Object_ID FROM Document_Objects doc JOIN Documents_in_Collections dic ON doc.Document_Object_ID = dic.Document_Object_ID JOIN Collections col ON dic.Collection_ID = col.Collection_ID LEFT JOIN Document_Subset_Members dsm ON doc.Document_Object_ID = dsm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE col.Collection_Name = 'Best' AND (ds.Document_Subset_Name IS NULL OR ds.Document_Subset_Name <> 'Best for 2000');
SELECT DISTINCT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best';
SELECT DISTINCT Document_Object_ID FROM (     SELECT Document_Object_ID     FROM Document_Subset_Members     JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID     WHERE Document_Subset_Name = 'Best for 2000'     UNION     SELECT Document_Object_ID     FROM Documents_in_Collections     JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID     WHERE Collection_Name = 'Best' );
SELECT DISTINCT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best';
SELECT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best';
SELECT COUNT(*) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Related_Collection_ID JOIN Collection_Subsets cs ON csm.Collection_Subset_ID = cs.Collection_Subset_ID WHERE cs.Collection_Subset_Name = 'Best';
SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collection_Subset_Members csm JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%';
SELECT name FROM songs ORDER BY name ASC;
SELECT songs.name, songs.language FROM songs;
SELECT MAX(voice_sound_quality) AS max_voice_sound_quality, MIN(voice_sound_quality) AS min_voice_sound_quality FROM performance_score;
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway';
SELECT id, language, original_artist FROM songs WHERE name != 'Love';
SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation = 'All the streets of love';
SELECT DISTINCT stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English';
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(ps.songs_id) >= 2;
SELECT p.id, p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC;
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5;
SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English';
SELECT s.id, s.name FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(DISTINCT ps.participant_id) DESC LIMIT 1;
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;
SELECT COUNT(*)  FROM songs  WHERE id NOT IN (SELECT songs_id FROM performance_score);
SELECT s.language, AVG(ps.rhythm_tempo) AS average_rhythm_score FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language;
SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';
SELECT DISTINCT p.name, p.popularity FROM participants p JOIN performance_score ps1 ON p.id = ps1.participant_id JOIN songs s1 ON ps1.songs_id = s1.id AND s1.language = 'Croatian' JOIN performance_score ps2 ON p.id = ps2.participant_id JOIN songs s2 ON ps2.songs_id = s2.id AND s2.language = 'English';
SELECT name FROM songs WHERE name LIKE '%Is%';
SELECT DISTINCT s.original_artist FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC;
SELECT COUNT(*) FROM City;
SELECT COUNT(*) FROM City;
SELECT DISTINCT state FROM City;
SELECT DISTINCT state FROM City;
SELECT COUNT(DISTINCT country) FROM City;
SELECT COUNT(DISTINCT country) FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA';
SELECT COUNT(*)  FROM City  WHERE country = 'Canada';
SELECT COUNT(*)  FROM City  WHERE country = 'Canada';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT state, COUNT(city_code) AS num_cities FROM City GROUP BY state;
SELECT state, COUNT(city_code) AS city_count FROM City GROUP BY state;
SELECT country, COUNT(city_code) AS num_cities FROM City GROUP BY country;
SELECT country, COUNT(city_code) AS city_count FROM City GROUP BY country;
SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2;
SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2;
SELECT state, COUNT(city_code) AS city_count FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1;
SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1;
SELECT country, COUNT(city_code) AS city_count FROM City GROUP BY country ORDER BY city_count ASC LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC LIMIT 1;
SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD';
SELECT Fname || ' ' || LName AS FullName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD';
SELECT COUNT(*)  FROM Student  JOIN City ON Student.city_code = City.city_code  WHERE City.country = 'China';
SELECT COUNT(*)  FROM Student  JOIN City ON Student.city_code = City.city_code  WHERE City.country = 'China';
SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore';
SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore';
SELECT City.country, COUNT(Student.StuID) AS NumberOfStudents FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.country;
SELECT C.country, COUNT(S.StuID) AS num_students FROM Student S JOIN City C ON S.city_code = C.city_code GROUP BY C.country;
SELECT City.city_name, COUNT(Student.StuID) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name;
SELECT City.city_name, COUNT(Student.StuID) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name;
SELECT state, COUNT(*) AS student_count FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY state ORDER BY student_count DESC LIMIT 1;
SELECT C.state, COUNT(S.StuID) AS num_students FROM Student S JOIN City C ON S.city_code = C.city_code GROUP BY C.state ORDER BY num_students DESC LIMIT 1;
SELECT country, COUNT(*) AS student_count FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country ORDER BY student_count ASC LIMIT 1;
SELECT country FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1;
SELECT city_name FROM City WHERE city_code IN (     SELECT city_code     FROM Student     GROUP BY city_code     HAVING COUNT(*) >= 3 );
SELECT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(S.StuID) >= 3;
SELECT C.state FROM Student S JOIN City C ON S.city_code = C.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5;
SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state HAVING COUNT(Student.StuID) > 5;
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country != 'USA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country != 'USA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'female' AND state = 'PA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'male' AND country != 'USA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'male' AND country != 'USA';
SELECT distance  FROM Direct_distance  WHERE city1_code = 'BAL' AND city2_code = 'CHI';
SELECT distance  FROM Direct_distance  WHERE city1_code = 'BAL' AND city2_code = 'CHI'    OR city1_code = 'CHI' AND city2_code = 'BAL';
SELECT distance  FROM Direct_distance  WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')    AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark');
SELECT distance  FROM Direct_distance  WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')    AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark');
SELECT AVG(distance) AS AverageDistance, MIN(distance) AS MinimumDistance, MAX(distance) AS MaximumDistance FROM Direct_distance;
SELECT AVG(distance) AS AverageDistance, MIN(distance) AS MinimumDistance, MAX(distance) AS MaximumDistance FROM Direct_distance;
SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT DISTINCT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT SUM(distance) AS TotalDistance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT SUM(distance)  FROM Direct_distance  WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT AVG(distance)  FROM Direct_distance  WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')     OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston');
SELECT AVG(distance)  FROM Direct_distance  WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')     OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston');
SELECT city_name FROM City C1 JOIN Direct_distance DD ON C1.city_code = DD.city2_code JOIN City C2 ON DD.city1_code = C2.city_code WHERE C2.city_name = 'Chicago' ORDER BY DD.distance ASC LIMIT 1;
SELECT city_name FROM City WHERE city_code = (     SELECT city2_code     FROM Direct_distance     WHERE city1_code = (         SELECT city_code         FROM City         WHERE city_name = 'Chicago'     )     ORDER BY distance ASC     LIMIT 1 );
SELECT city_name FROM City WHERE city_code = (     SELECT city2_code     FROM Direct_distance     WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')     ORDER BY distance DESC     LIMIT 1 );
SELECT city_name FROM City WHERE city_code = (     SELECT city2_code     FROM Direct_distance     WHERE city1_code = (         SELECT city_code         FROM City         WHERE city_name = 'Boston'     )     ORDER BY distance DESC     LIMIT 1 );
SELECT c1.city_code, SUM(dd.distance) AS total_distance FROM City c1 JOIN Direct_distance dd ON c1.city_code = dd.city1_code GROUP BY c1.city_code;
SELECT city_code, SUM(distance) AS total_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_code;
SELECT c.city_name, AVG(d.distance) AS avg_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name;
SELECT C.city_name, AVG(D.distance) AS avg_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code OR C.city_code = D.city2_code GROUP BY C.city_name;
SELECT SUM(DISTINCT dd.distance) AS total_distance FROM Student s1 JOIN Student s2 ON s1.StuID != s2.StuID JOIN City c1 ON s1.city_code = c1.city_code JOIN City c2 ON s2.city_code = c2.city_code JOIN Direct_distance dd ON c1.city_code = dd.city1_code AND c2.city_code = dd.city2_code WHERE (s1.FName = 'Linda' AND s1.LName = 'Smith') AND (s2.FName = 'Tracy' AND s2.LName = 'Kim');
SELECT DD.distance FROM Student S1 JOIN Student S2 ON S1.LName = 'Smith' AND S1.FName = 'Linda' AND S2.LName = 'Kim' AND S2.FName = 'Tracy' JOIN City C1 ON S1.city_code = C1.city_code JOIN City C2 ON S2.city_code = C2.city_code JOIN Direct_distance DD ON C1.city_code = DD.city1_code AND C2.city_code = DD.city2_code;
SELECT Fname, LName FROM Student WHERE StuID = (     SELECT StuID     FROM Student     JOIN City AS C1 ON Student.city_code = C1.city_code     JOIN City AS C2 ON C2.city_name = 'Linda Smith'     JOIN Direct_distance ON C1.city_code = Direct_distance.city1_code AND C2.city_code = Direct_distance.city2_code     ORDER BY Direct_distance.distance DESC     LIMIT 1 );
SELECT S.FName || ' ' || S.LName AS FullName FROM Student S JOIN City C1 ON S.city_code = C1.city_code JOIN City C2 ON C2.city_name = 'Linda Smith' JOIN Direct_distance DD ON C1.city_code = DD.city1_code AND C2.city_code = DD.city2_code ORDER BY DD.distance DESC LIMIT 1;
SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.FName = 'Linda';
SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.FName = 'Linda';
SELECT * FROM Sailors WHERE age > 30;
SELECT * FROM Sailors WHERE age > 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT Boats.bid, Boats.name, Boats.color FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1;
SELECT DISTINCT bid FROM Reserves WHERE sid = 1;
SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102;
SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 102;
SELECT DISTINCT bid FROM Reserves;
SELECT DISTINCT bid FROM Reserves;
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT DISTINCT sid FROM Sailors S1 WHERE age > ALL (SELECT age FROM Sailors S2 WHERE S1.sid != S2.sid);
SELECT DISTINCT S.sid FROM Sailors S WHERE S.age > (SELECT MIN(age) FROM Sailors);
SELECT DISTINCT name  FROM Sailors  WHERE age > (     SELECT MAX(age)      FROM Sailors      WHERE rating > 7 );
SELECT DISTINCT S1.name FROM Sailors S1, Sailors S2 WHERE S1.age > S2.age AND S2.rating > 7;
SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid;
SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid;
SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1;
SELECT DISTINCT S.name FROM Sailors S JOIN Reserves R1 ON S.sid = R1.sid JOIN Reserves R2 ON S.sid = R2.sid AND R1.bid <> R2.bid GROUP BY S.sid HAVING COUNT(DISTINCT R1.bid) >= 2;
SELECT DISTINCT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue';
SELECT DISTINCT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue';
SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue';
SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue');
SELECT DISTINCT R1.sid FROM Reserves R1 JOIN Boats B1 ON R1.bid = B1.bid JOIN Reserves R2 ON R1.sid = R2.sid JOIN Boats B2 ON R2.bid = B2.bid WHERE B1.color = 'red' AND B2.color = 'blue';
SELECT DISTINCT R1.sid FROM Reserves R1 JOIN Boats B1 ON R1.bid = B1.bid JOIN Reserves R2 ON R1.sid = R2.sid JOIN Boats B2 ON R2.bid = B2.bid WHERE B1.color = 'red' AND B2.color = 'blue';
SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R1 ON S.sid = R1.sid JOIN Boats B1 ON R1.bid = B1.bid AND B1.color = 'red' JOIN Reserves R2 ON S.sid = R2.sid JOIN Boats B2 ON R2.bid = B2.bid AND B2.color = 'blue';
SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue';
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves);
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves);
SELECT s.name, s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT S.sid, S.name FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R);
SELECT sid FROM Sailors WHERE sid NOT IN (     SELECT DISTINCT sid     FROM Reserves );
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves);
SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 103;
SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 103;
SELECT name  FROM Sailors  WHERE rating > (     SELECT MAX(rating)      FROM Sailors      WHERE name = 'Luis' );
SELECT name  FROM Sailors  WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis');
SELECT name  FROM Sailors  WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis');
SELECT DISTINCT S1.name FROM Sailors S1 WHERE S1.rating > ALL (     SELECT S2.rating     FROM Sailors S2     WHERE S2.name = 'Luis' );
SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2;
SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE S.rating >= 3;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1;
SELECT COUNT(*) FROM Sailors;
SELECT COUNT(*) FROM Sailors;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT COUNT(*)  FROM Sailors  WHERE name LIKE 'D%';
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%';
SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors;
SELECT AVG(rating) AS average_rating, MAX(age) AS largest_age FROM Sailors;
SELECT Boats.bid, COUNT(Reserves.bid) AS reservation_count FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid;
SELECT Boats.bid, COUNT(Reserves.bid) AS reservation_count FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid;
SELECT Boats.bid, COUNT(Reserves.bid) AS num_reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Boats.bid > 50 GROUP BY Boats.bid;
SELECT bid, COUNT(*) AS reservation_count FROM Reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT bid, COUNT(*) AS reservation_count FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT Boats.bid, Boats.name, COUNT(Reserves.sid) AS reservation_count FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Boats.bid, Boats.name;
SELECT Boats.bid, COUNT(Reserves.sid) AS reservation_count FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid > 1 GROUP BY Boats.bid;
SELECT S.rating, AVG(S.age) AS average_age FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating;
SELECT S.rating, AVG(S.age) AS average_age FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT DISTINCT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30;
SELECT DISTINCT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30;
SELECT name FROM Sailors WHERE rating > (     SELECT MAX(rating)     FROM Sailors S     JOIN Reserves R ON S.sid = R.sid     JOIN Boats B ON R.bid = B.bid     WHERE B.color = 'red' );
SELECT name  FROM Sailors  WHERE rating > (     SELECT MAX(rating)      FROM Sailors S      JOIN Reserves R ON S.sid = R.sid      JOIN Boats B ON R.bid = B.bid      WHERE B.color = 'red' );
SELECT MAX(rating) FROM Sailors;
SELECT MAX(rating) FROM Sailors;
SELECT DISTINCT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.name = 'Melon';
SELECT DISTINCT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon';
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1;
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1;
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC;
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC;
SELECT Class, COUNT(*) AS Count FROM headphone GROUP BY Class ORDER BY Count DESC LIMIT 1;
SELECT Class, COUNT(*) AS Count FROM headphone GROUP BY Class ORDER BY Count DESC LIMIT 1;
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) > 2;
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) <= 2;
SELECT Class, COUNT(*) AS NumberOfHeadphones FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT Class, COUNT(*) AS Num_Headphones FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT Earpads, COUNT(*) AS UsageCount FROM headphone GROUP BY Earpads ORDER BY UsageCount DESC LIMIT 2;
SELECT Earpads, COUNT(*) AS Num_Headphones FROM headphone GROUP BY Earpads ORDER BY Num_Headphones DESC LIMIT 2;
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1;
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1;
SELECT Construction, AVG(Price) AS AveragePrice FROM headphone GROUP BY Construction;
SELECT Construction, AVG(Price) AS Average_Price FROM headphone GROUP BY Construction;
SELECT DISTINCT h1.Class FROM headphone h1 JOIN stock s1 ON h1.Headphone_ID = s1.Headphone_ID WHERE h1.Earpads = 'Bowls' AND EXISTS (     SELECT 1     FROM headphone h2     JOIN stock s2 ON h2.Headphone_ID = s2.Headphone_ID     WHERE h2.Class = h1.Class     AND h2.Earpads = 'Comfort Pads' );
SELECT DISTINCT h1.Class FROM headphone h1 JOIN stock s1 ON h1.Headphone_ID = s1.Headphone_ID WHERE h1.Earpads = 'Bowls' AND EXISTS (     SELECT 1     FROM headphone h2     JOIN stock s2 ON h2.Headphone_ID = s2.Headphone_ID     WHERE h2.Earpads = 'Comfort Pads'     AND h1.Class = h2.Class );
SELECT DISTINCT Earpads FROM headphone WHERE Construction <> 'Plastic';
SELECT DISTINCT Earpads FROM headphone WHERE Construction <> 'Plastic';
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone);
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone);
SELECT Name FROM store ORDER BY Date_Opened;
SELECT Name FROM store ORDER BY Date_Opened;
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';
SELECT COUNT(DISTINCT Neighborhood) FROM store;
SELECT COUNT(DISTINCT Neighborhood) FROM store;
SELECT Neighborhood, COUNT(*) AS StoreCount FROM store GROUP BY Neighborhood;
SELECT Neighborhood, COUNT(*) AS StoreCount FROM store GROUP BY Neighborhood;
SELECT s.Name, SUM(st.Quantity) AS Total_Headphones FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Store_ID ORDER BY Total_Headphones DESC LIMIT 1;
SELECT s.Name, SUM(st.Quantity) AS Total_Quantity FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name HAVING SUM(st.Quantity) > 0;
SELECT Name FROM store WHERE Store_ID NOT IN (     SELECT DISTINCT Store_ID     FROM stock     WHERE Quantity > 0 );
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0);
SELECT h.Model FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Headphone_ID IS NULL;
SELECT h.Model FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Store_ID IS NULL;
SELECT h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Model ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Model ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT SUM(stock.Quantity)  FROM stock  JOIN store ON stock.Store_ID = store.Store_ID  WHERE store.Name = 'Woodman';
SELECT SUM(stock.Quantity)  FROM stock  JOIN store ON stock.Store_ID = store.Store_ID  WHERE store.Name = 'Woodman';
SELECT DISTINCT s.Neighborhood FROM store s WHERE NOT EXISTS (     SELECT 1     FROM stock st     JOIN headphone h ON st.Headphone_ID = h.Headphone_ID     WHERE st.Store_ID = s.Store_ID );
SELECT DISTINCT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (     SELECT st.Store_ID     FROM stock st );
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(P.paper_id) FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE P.year = 2009 AND A.name = 'Columbia University';
SELECT COUNT(P.paper_id) FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009;
SELECT name, address FROM Affiliation;
SELECT name, address FROM Affiliation;
SELECT venue, year FROM Paper ORDER BY year;
SELECT DISTINCT venue FROM Paper ORDER BY year;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University';
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University';
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown';
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown';
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al1 ON p.paper_id = al1.paper_id JOIN Affiliation a1 ON al1.affiliation_id = a1.affiliation_id JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Affiliation a2 ON al2.affiliation_id = a2.affiliation_id WHERE a1.name = 'Stanford University' AND a2.name = 'Columbia University';
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al1 ON p.paper_id = al1.paper_id JOIN Affiliation a1 ON al1.affiliation_id = a1.affiliation_id AND a1.name = 'Stanford University' JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Affiliation a2 ON al2.affiliation_id = a2.affiliation_id AND a2.name = 'Columbia University';
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al1 ON p.paper_id = al1.paper_id JOIN Author a1 ON al1.author_id = a1.author_id JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Author a2 ON al2.author_id = a2.author_id WHERE a1.name = 'Mckeown, Kathleen' AND a2.name = 'Rambow, Owen';
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al1 ON p.paper_id = al1.paper_id JOIN Author a1 ON al1.author_id = a1.author_id JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Author a2 ON al2.author_id = a2.author_id WHERE a1.name = 'Mckeown, Kathleen' AND a2.name = 'Rambow, Owen';
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND p.paper_id NOT IN (     SELECT p.paper_id     FROM Paper p     JOIN Author_list al ON p.paper_id = al.paper_id     JOIN Author a ON al.author_id = a.author_id     WHERE a.name = 'Rambow' )
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND p.paper_id NOT IN (     SELECT p.paper_id     FROM Paper p     JOIN Author_list al ON p.paper_id = al.paper_id     JOIN Author a ON al.author_id = a.author_id     WHERE a.name = 'Rambow' );
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' OR a.name = 'Rambow, Owen';
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' OR a.name = 'Rambow, Owen';
SELECT Author.name, COUNT(Paper.paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.name ORDER BY num_papers DESC;
SELECT Author.author_id, Author.name, COUNT(Paper.paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY num_papers DESC;
SELECT Affiliation.name, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY paper_count ASC;
SELECT A.name FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.affiliation_id ORDER BY COUNT(AL.paper_id) DESC;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(al.paper_id) > 50;
SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(DISTINCT Author_list.paper_id) > 50;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(al.paper_id) = 1;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(al.paper_id) = 1;
SELECT venue, year, COUNT(*) AS num_publications FROM Paper GROUP BY venue, year ORDER BY num_publications DESC LIMIT 1;
SELECT venue, year, COUNT(*) AS publication_count FROM Paper GROUP BY venue, year ORDER BY publication_count DESC LIMIT 1;
SELECT venue, COUNT(*) AS num_publications FROM Paper GROUP BY venue ORDER BY num_publications ASC LIMIT 1;
