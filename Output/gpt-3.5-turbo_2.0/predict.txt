SELECT COUNT(Club_ID) FROM club;
SELECT COUNT(*) FROM club;
SELECT Name FROM club ORDER BY Name ASC;
SELECT Name FROM club ORDER BY Name;
SELECT Manager, Captain FROM club;
SELECT Manager, Captain FROM club;
SELECT Name FROM club WHERE Manufacturer != 'Nike';
SELECT Name FROM club WHERE Manufacturer != 'Nike';
SELECT Name FROM player ORDER BY Wins_count ASC;
SELECT Name FROM player ORDER BY Wins_count ASC;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT p.Name, c.Name FROM player p LEFT JOIN club c ON p.Club_ID = c.Club_ID;
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID;
SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID WHERE player.Wins_count > 2;
SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID WHERE player.Wins_count > 2;
SELECT player.Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = "Sam Allardyce";
SELECT player.Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = "Sam Allardyce";
SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC;
SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC;
SELECT club.Manufacturer, COUNT(DISTINCT club.Club_ID) AS Club_Count FROM club GROUP BY club.Manufacturer;
SELECT club.Manufacturer, COUNT(DISTINCT club.Club_ID) AS Club_Count FROM club GROUP BY club.Manufacturer;
SELECT club.Manufacturer FROM club GROUP BY club.Manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT club.Manufacturer FROM club GROUP BY club.Manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT club.Manufacturer FROM club GROUP BY club.Manufacturer HAVING COUNT(DISTINCT club.Club_ID) > 1;
SELECT club.Manufacturer FROM club GROUP BY club.Manufacturer HAVING COUNT(DISTINCT club.Club_ID) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1;
SELECT Name FROM club LEFT JOIN player ON club.Club_ID = player.Club_ID WHERE player.Club_ID IS NULL;
SELECT Name FROM club LEFT JOIN player ON club.Club_ID = player.Club_ID WHERE player.Club_ID IS NULL;
SELECT Country FROM player WHERE Earnings > 1400000 UNION SELECT Country FROM player WHERE Earnings < 1100000;
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000;
SELECT COUNT(DISTINCT Country) FROM player;
SELECT COUNT(DISTINCT Country) FROM player;
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe';
SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe');
SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (     SELECT customer_id     FROM Orders     GROUP BY customer_id     HAVING COUNT(order_id) > 2 ) AND customer_id IN (     SELECT customer_id     FROM Order_Items     GROUP BY customer_id     HAVING COUNT(order_item_id) >= 3 );
SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (     SELECT customer_id     FROM Orders     GROUP BY customer_id     HAVING COUNT(order_id) > 2 ) AND customer_id IN (     SELECT customer_id     FROM Order_Items     GROUP BY customer_id     HAVING COUNT(order_item_id) >= 3 );
SELECT order_id, order_status_code, COUNT(product_id) AS number_of_products FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id GROUP BY order_id, order_status_code;
SELECT order_id, order_status_code, COUNT(product_id) AS number_of_products FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id GROUP BY order_id, order_status_code;
SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR order_id IN (     SELECT order_id     FROM Order_Items     GROUP BY order_id     HAVING COUNT(order_item_id) > 1 );
SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR order_id IN (     SELECT order_id     FROM Order_Items     GROUP BY order_id     HAVING COUNT(order_item_id) > 1 );
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (     SELECT customer_id     FROM Orders );
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (     SELECT customer_id     FROM Orders );
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (     SELECT product_id     FROM Order_Items     GROUP BY product_id     HAVING COUNT(order_item_id) >= 2 );
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (     SELECT product_id     FROM Order_Items     GROUP BY product_id     HAVING COUNT(order_item_id) >= 2 );
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (     SELECT order_id     FROM Order_Items     GROUP BY order_id     HAVING COUNT(order_item_id) >= 2 );
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (     SELECT order_id     FROM Order_Items     GROUP BY order_id     HAVING COUNT(order_item_id) >= 2 );
SELECT product_id, product_name, product_price FROM Products WHERE product_id IN (     SELECT product_id     FROM Order_Items     GROUP BY product_id     ORDER BY COUNT(order_item_id) DESC     LIMIT 1 );
SELECT product_id, product_name, product_price FROM Products WHERE product_id IN (     SELECT product_id     FROM Order_Items     GROUP BY product_id     ORDER BY COUNT(order_item_id) DESC );
SELECT order_id, SUM(product_price) AS total_price FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_price LIMIT 1;
SELECT order_id, SUM(product_price) AS total_cost FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_cost LIMIT 1;
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT gender_code, COUNT(order_item_id) AS number_of_products FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY gender_code;
SELECT gender_code, COUNT(Order_Items.product_id) AS number_of_products FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY gender_code;
SELECT gender_code, COUNT(Orders.order_id) AS number_of_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code;
SELECT gender_code, COUNT(Orders.order_id) AS number_of_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code;
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;
SELECT product_name, shipment_date FROM Products JOIN Shipment_Items ON Products.product_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id;
SELECT product_name, shipment_date FROM Products JOIN Shipment_Items ON Products.product_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id;
SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id;
SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id;
SELECT product_name, product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id;
SELECT product_name, product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id;
SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'F';
SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'F';
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (     SELECT invoice_number     FROM Shipments );
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (     SELECT invoice_number     FROM Shipments );
SELECT order_id, date_order_placed, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id, date_order_placed;
SELECT order_id, date_order_placed, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id, date_order_placed;
SELECT COUNT(DISTINCT customer_id) FROM Orders;
SELECT COUNT(DISTINCT customer_id) FROM Orders;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_id NOT IN (     SELECT DISTINCT product_id     FROM Order_Items );
ze:text, product_description:text) # Customers(customer_id:number, gender_code:text, customer_first_name:text, customer_middle_initial:text, customer_last_name:text, email_address:text, login_name:text, login_password:text, phone_number:text, address_line_1:text, town_city:text, county:text, country:text) # Customer_Payment_Methods(customer_id:number, payment_method_code:text) # Invoices(invoice_number:number, invoice_status_code:text, invoice_date:time) # Orders(order_id:number, customer_id:number, order_status_code:text, date_order_placed:time) # Order_Items(order_item_id:number, product_id:number, order_id:number, order_item_status_code:text) # Shipments(shipment_id:number, order_id:number, invoice_number:number, shipment_tracking_number:text, shipment_date:time) # Shipment_Items(shipment_id:number, order_item_id:number) # ### What are the product names of the items that are higher than average pricing? AI: SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
, product_description:text) # Customers(customer_id:number, gender_code:text, customer_first_name:text, customer_middle_initial:text, customer_last_name:text, email_address:text, login_name:text, login_password:text, phone_number:text, address_line_1:text, town_city:text, county:text, country:text) # Customer_Payment_Methods(customer_id:number, payment_method_code:text) # Invoices(invoice_number:number, invoice_status_code:text, invoice_date:time) # Orders(order_id:number, customer_id:number, order_status_code:text, date_order_placed:time) # Order_Items(order_item_id:number, product_id:number, order_id:number, order_item_status_code:text) # Shipments(shipment_id:number, order_id:number, invoice_number:number, shipment_tracking_number:text, shipment_date:time) # Shipment_Items(shipment_id:number, order_item_id:number) # ### What are the product names and colors of products that have a price above the mean price? AI: SELECT product_name, product_color FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
ize:text, product_description:text) # Customers(customer_id:number, gender_code:text, customer_first_name:text, customer_middle_initial:text, customer_last_name:text, email_address:text, login_name:text, login_password:text, phone_number:text, address_line_1:text, town_city:text, county:text, country:text) # Customer_Payment_Methods(customer_id:number, payment_method_code:text) # Invoices(invoice_number:number, invoice_status_code:text, invoice_date:time) # Orders(order_id:number, customer_id:number, order_status_code:text, date_order_placed:time) # Order_Items(order_item_id:number, product_id:number, order_id:number, order_item_status_code:text) # Shipments(shipment_id:number, order_id:number, invoice_number:number, shipment_tracking_number:text, shipment_date:time) # Shipment_Items(shipment_id:number, order_item_id:number) # ### What are the product names and descriptions of products priced below average? AI: SELECT product_name, product_description FROM Products WHERE product_price < (SELECT AVG(product_price) FROM Products);
ze:text, product_description:text) # Customers(customer_id:number, gender_code:text, customer_first_name:text, customer_middle_initial:text, customer_last_name:text, email_address:text, login_name:text, login_password:text, phone_number:text, address_line_1:text, town_city:text, county:text, country:text) # Customer_Payment_Methods(customer_id:number, payment_method_code:text) # Invoices(invoice_number:number, invoice_status_code:text, invoice_date:time) # Orders(order_id:number, customer_id:number, order_status_code:text, date_order_placed:time) # Order_Items(order_item_id:number, product_id:number, order_id:number, order_item_status_code:text) # Shipments(shipment_id:number, order_id:number, invoice_number:number, shipment_tracking_number:text, shipment_date:time) # Shipment_Items(shipment_id:number, order_item_id:number) # ### What are the size and color of the products whose price is more than the average price? AI: SELECT product_size, product_color FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT order_status_code, date_order_placed FROM Orders;
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA';
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States';
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT COUNT(*) FROM Shipments;
SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items);
SELECT AVG(product_price) FROM Products;
SELECT AVG(product_price) FROM Products;
SELECT AVG(product_price) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT AVG(product_price) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT email_address, town_city, county FROM Customers WHERE gender_code = (     SELECT gender_code     FROM Customers     GROUP BY gender_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT email_address, town_city, county FROM Customers WHERE gender_code = (     SELECT gender_code     FROM Orders     JOIN Customers ON Orders.customer_id = Customers.customer_id     GROUP BY gender_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT date_order_placed FROM Orders WHERE customer_id IN (     SELECT customer_id     FROM Customer_Payment_Methods     GROUP BY customer_id     HAVING COUNT(*) >= 2 );
SELECT date_order_placed FROM Orders WHERE customer_id IN (     SELECT customer_id     FROM Customer_Payment_Methods     GROUP BY customer_id     HAVING COUNT(*) >= 2 );
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT product_id, product_description FROM Products WHERE product_id IN (     SELECT product_id     FROM Order_Items     GROUP BY product_id     HAVING COUNT(*) > 3 );
SELECT product_id, product_description FROM Products WHERE product_id IN (     SELECT product_id     FROM Order_Items     GROUP BY product_id     HAVING COUNT(*) > 3 );
SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (     SELECT invoice_number     FROM Shipments     GROUP BY invoice_number     HAVING COUNT(*) >= 2 );
SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (     SELECT invoice_number     FROM Shipments     GROUP BY invoice_number     HAVING COUNT(*) >= 2 );
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director);
SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director);
SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%';
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel;
SELECT Title FROM program ORDER BY Start_Year DESC;
SELECT Name FROM director WHERE Director_ID IN (     SELECT Director_ID     FROM program     GROUP BY Director_ID     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Name, Age FROM director WHERE Director_ID IN (     SELECT Director_ID     FROM program     GROUP BY Director_ID     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1;
SELECT Name, Internet FROM channel WHERE Channel_ID IN (     SELECT Channel_ID     FROM program     GROUP BY Channel_ID     HAVING COUNT(*) > 1 );
SELECT channel.Name, COUNT(program.Program_ID) AS Number_of_Programs FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID;
SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (     SELECT DISTINCT Channel_ID     FROM program );
SELECT director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID WHERE program.Title = 'Dracula';
SELECT channel.Name, channel.Internet FROM channel WHERE Channel_ID IN (     SELECT Channel_ID     FROM director_admin     GROUP BY Channel_ID     ORDER BY COUNT(Director_ID) DESC     LIMIT 1 );
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60;
SELECT Name FROM channel WHERE Channel_ID IN (     SELECT Channel_ID     FROM director     WHERE Age < 40 ) AND Channel_ID IN (     SELECT Channel_ID     FROM director     WHERE Age > 60 );
SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (     SELECT Channel_ID     FROM director     WHERE Name = 'Hank Baskett' );
SELECT COUNT(*) FROM radio;
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC;
SELECT tv_show_name, Original_Airdate FROM tv_show;
SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC';
SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30;
SELECT Transmitter  FROM radio  ORDER BY ERP_kW DESC  LIMIT 1;
SELECT AVG(ERP_kW) FROM radio;
SELECT Affiliation, COUNT(*) AS Number_of_Channels FROM city_channel GROUP BY Affiliation;
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3;
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC;
SELECT radio.Transmitter, city_channel.City FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID;
SELECT radio.Transmitter, city_channel.Station_name FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID ORDER BY radio.ERP_kW DESC;
SELECT radio.Transmitter, COUNT(city_channel_radio.City_channel_ID) AS Number_of_Channels FROM radio LEFT JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY radio.Transmitter;
SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (     SELECT Radio_ID     FROM city_channel_radio );
SELECT Model FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle WHERE Power > 6000);
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1;
SELECT Name FROM driver WHERE Citizenship = 'United States';
SELECT Name FROM driver WHERE Citizenship = 'United States';
SELECT COUNT(Vehicle_ID) AS Max_Vehicles_Driven, Driver_ID FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(Vehicle_ID) DESC LIMIT 1;
SELECT Driver_ID, COUNT(Vehicle_ID) AS Max_Vehicles_Driven FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(Vehicle_ID) DESC LIMIT 1;
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Driver_ID) ASC LIMIT 1;
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Driver_ID) ASC LIMIT 1;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996';
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996';
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle     WHERE Build_Year = '2012' );
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle     WHERE Build_Year = '2012' );
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR';
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR';
SELECT AVG(Top_Speed) FROM vehicle;
SELECT AVG(Top_Speed) FROM vehicle;
SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (     SELECT Driver_ID     FROM vehicle_driver     WHERE Vehicle_ID IN (         SELECT Vehicle_ID         FROM vehicle         WHERE Power > 5000     ) );
SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (     SELECT Driver_ID     FROM vehicle_driver     WHERE Vehicle_ID IN (         SELECT Vehicle_ID         FROM vehicle         WHERE Power > 5000     ) );
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (     SELECT Vehicle_ID     FROM vehicle_driver );
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (     SELECT Vehicle_ID     FROM vehicle_driver );
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle_driver     GROUP BY Vehicle_ID     HAVING COUNT(DISTINCT Driver_ID) = 2 ) OR Builder = 'Ziyang';
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle_driver     GROUP BY Vehicle_ID     HAVING COUNT(DISTINCT Driver_ID) = 2 ) OR Builder = 'Ziyang';
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle_driver     GROUP BY Vehicle_ID     HAVING COUNT(DISTINCT Driver_ID) > 2 ) OR Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle_driver     WHERE Driver_ID IN (         SELECT Driver_ID         FROM driver         WHERE Name = 'Jeff Gordon'     ) );
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle_driver     GROUP BY Vehicle_ID     HAVING COUNT(DISTINCT Driver_ID) > 2 ) OR Vehicle_ID IN (     SELECT Vehicle_ID     FROM vehicle_driver     WHERE Driver_ID IN (         SELECT Driver_ID         FROM driver         WHERE Name = 'Jeff Gordon'     ) );
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT Name FROM driver ORDER BY Name ASC;
SELECT Name FROM driver ORDER BY Name ASC;
SELECT Racing_Series, COUNT(DISTINCT Driver_ID)  FROM driver  GROUP BY Racing_Series;
SELECT Racing_Series, COUNT(DISTINCT Driver_ID)  FROM driver  GROUP BY Racing_Series;
SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1';
SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1';
SELECT COUNT(*)  FROM driver  WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver);
SELECT COUNT(*)  FROM driver  WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver);
SELECT COUNT(*)  FROM Exams;
SELECT COUNT(*) FROM Exams;
SELECT DISTINCT Subject_Code  FROM Exams  ORDER BY Subject_Code ASC;
SELECT DISTINCT Subject_Code  FROM Exams  ORDER BY Subject_Code ASC;
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database';
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database';
SELECT Exam_Date  FROM Exams  WHERE Subject_Code LIKE '%data%'  ORDER BY Exam_Date DESC;
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code;
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code;
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal";
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal";
SELECT COUNT(DISTINCT Comments) FROM Student_Answers;
SELECT COUNT(DISTINCT Comments) FROM Student_Answers;
SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC;
SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC;
SELECT s.First_Name, sa.Date_of_Answer FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID;
SELECT s.First_Name, sa.Date_of_Answer FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID;
SELECT s.Email_Adress, sa.Date_of_Answer FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC;
SELECT s.Email_Adress, sa.Date_of_Answer FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC;
SELECT Assessment, COUNT(*) as count FROM Student_Assessments GROUP BY Assessment ORDER BY count ASC LIMIT 1;
SELECT Assessment, COUNT(*) as count FROM Student_Assessments GROUP BY Assessment ORDER BY count ASC LIMIT 1;
SELECT s.First_Name FROM Students s JOIN (     SELECT Student_ID     FROM Student_Answers     GROUP BY Student_ID     HAVING COUNT(*) >= 2 ) sa ON s.Student_ID = sa.Student_ID;
SELECT s.First_Name FROM Students s JOIN (     SELECT Student_ID     FROM Student_Answers     GROUP BY Student_ID     HAVING COUNT(*) >= 2 ) sa ON s.Student_ID = sa.Student_ID;
SELECT Valid_Answer_Text, COUNT(*) as count FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count DESC LIMIT 1;
SELECT Valid_Answer_Text, COUNT(*) as count   FROM Valid_Answers   GROUP BY Valid_Answer_Text   ORDER BY count DESC   LIMIT 1;
SELECT Last_Name FROM Students WHERE Gender_MFU != "M";
SELECT Last_Name FROM Students WHERE Gender_MFU != "M";
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU;
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU;
SELECT Last_Name FROM Students WHERE Gender_MFU = "F" OR Gender_MFU = "M";
SELECT Last_Name FROM Students WHERE Gender_MFU = "F" OR Gender_MFU = "M";
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers);
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers);
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal" AND Student_ID IN (     SELECT Student_ID     FROM Student_Answers     WHERE Comments = "Absent" );
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal" AND Student_ID IN (     SELECT Student_ID     FROM Student_Answers     WHERE Comments = "Absent" );
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3;
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3;
SELECT * FROM Students;
SELECT * FROM Students;
SELECT COUNT(*) FROM Addresses;
SELECT COUNT(*) FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT COUNT(*) FROM Products;
SELECT COUNT(*) FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_price FROM Products WHERE product_name = "Monitor";
SELECT product_price FROM Products WHERE product_name = "Monitor";
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products;
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products;
SELECT AVG(product_price) FROM Products WHERE product_type_code = "Clothes";
SELECT AVG(product_price) FROM Products WHERE product_type_code = "Clothes";
SELECT COUNT(*) FROM Products WHERE product_type_code = "Hardware";
SELECT COUNT(*) FROM Products WHERE product_type_code = "Hardware";
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_name FROM Products WHERE product_type_code = "Hardware" AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = "Hardware");
SELECT product_name FROM Products WHERE product_type_code = "Hardware" AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = "Hardware");
SELECT product_name FROM Products WHERE product_type_code = "Clothes" ORDER BY product_price DESC LIMIT 1;
SELECT product_name FROM Products WHERE product_type_code = "Clothes" ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = "Hardware" ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = "Hardware" ORDER BY product_price ASC LIMIT 1;
SELECT product_name FROM Products ORDER BY product_price DESC;
SELECT product_name FROM Products ORDER BY product_price DESC;
SELECT * FROM Products WHERE product_type_code = "Hardware" ORDER BY product_price ASC;
SELECT * FROM Products WHERE product_type_code = "Hardware" ORDER BY product_price ASC;
SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code;
SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2;
SELECT product_type_code, COUNT(*) as count FROM Products GROUP BY product_type_code ORDER BY count DESC LIMIT 1;
SELECT product_type_code, COUNT(*) as count FROM Products GROUP BY product_type_code ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = "Jeromy";
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = "Jeromy";
SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code  FROM Customers  GROUP BY payment_method_code  ORDER BY COUNT(customer_id) DESC  LIMIT 1;
SELECT payment_method_code  FROM Customers  GROUP BY payment_method_code  ORDER BY COUNT(customer_id) DESC  LIMIT 1;
SELECT customer_name  FROM Customers  WHERE payment_method_code = (     SELECT payment_method_code      FROM Customers      GROUP BY payment_method_code      ORDER BY COUNT(customer_id) ASC      LIMIT 1 );
SELECT customer_name  FROM Customers  WHERE payment_method_code = (     SELECT payment_method_code      FROM Customers      GROUP BY payment_method_code      ORDER BY COUNT(customer_id) ASC      LIMIT 1 );
SELECT payment_method_code, customer_number  FROM Customers  WHERE customer_name = 'Jeromy';
SELECT payment_method_code, customer_number  FROM Customers  WHERE customer_name = 'Jeromy';
SELECT DISTINCT payment_method_code  FROM Customers;
SELECT DISTINCT payment_method_code  FROM Customers;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1;
SELECT COUNT(order_id)  FROM Customer_Orders;
SELECT COUNT(order_id)  FROM Customer_Orders;
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (     SELECT customer_id     FROM Customers     WHERE customer_name = 'Jeromy' );
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (     SELECT customer_id     FROM Customers     WHERE customer_name = 'Jeromy' );
SELECT customer_name, customer_id, COUNT(order_id)  FROM Customers  JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id  GROUP BY customer_name, customer_id;
SELECT customer_name, customer_id, COUNT(order_id)  FROM Customers  JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id  GROUP BY customer_name, customer_id;
SELECT customer_id, customer_name, customer_phone, customer_email  FROM Customers  WHERE customer_id = (     SELECT customer_id      FROM Customer_Orders      GROUP BY customer_id      ORDER BY COUNT(order_id) DESC      LIMIT 1 );
SELECT customer_id, customer_name, customer_phone, customer_email  FROM Customers  WHERE customer_id = (     SELECT customer_id      FROM Customer_Orders      GROUP BY customer_id      ORDER BY COUNT(order_id) DESC      LIMIT 1 );
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code;
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code;
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_id) DESC LIMIT 1;
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT COUNT(*) FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor');
SELECT SUM(order_quantity) FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor');
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor'));
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor'));
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders;
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders;
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders);
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(CAST(order_quantity AS INTEGER)) > 6 OR COUNT(*) > 3);
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(CAST(order_quantity AS INTEGER)) > 6 OR COUNT(*) > 3);
SELECT COUNT(*) FROM building;
SELECT COUNT(*) FROM building;
SELECT Name FROM building ORDER BY Number_of_Stories ASC;
SELECT Name FROM building ORDER BY Number_of_Stories ASC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980;
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980;
SELECT AVG(Population) FROM region;
SELECT AVG(Population) FROM region;
SELECT Name FROM region ORDER BY Name ASC;
SELECT Name FROM region ORDER BY Name ASC;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region);
SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region);
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT b.Name AS Building_Name, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT b.Name AS Building_Name, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(b.Building_ID) > 1;
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(b.Building_ID) > 1;
SELECT r.Capital FROM region r JOIN (     SELECT Region_ID, COUNT(Building_ID) AS num_buildings     FROM building     GROUP BY Region_ID     ORDER BY num_buildings DESC     LIMIT 1 ) max_buildings ON r.Region_ID = max_buildings.Region_ID;
SELECT r.Capital FROM region r JOIN (     SELECT Region_ID, COUNT(Building_ID) AS num_buildings     FROM building     GROUP BY Region_ID     ORDER BY num_buildings DESC     LIMIT 1 ) max_buildings ON r.Region_ID = max_buildings.Region_ID;
SELECT b.Address AS Building_Address, r.Capital AS Region_Capital FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT b.Address AS Building_Address, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo';
SELECT Number_of_Stories FROM building WHERE Region_ID = (SELECT Region_ID FROM region WHERE Name = 'Abruzzo');
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings FROM building GROUP BY Completed_Year;
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings FROM building GROUP BY Completed_Year;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building);
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building);
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15;
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15;
SELECT DISTINCT Address FROM building;
SELECT DISTINCT Address FROM building;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT COUNT(*) FROM Services;
SELECT COUNT(*) FROM Services;
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch';
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch';
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID GROUP BY s.Service_ID HAVING COUNT(cs.Customers_and_Services_ID) > 3;
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID GROUP BY s.Service_ID HAVING COUNT(cs.Customers_and_Services_ID) > 3;
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(cs.Customers_and_Services_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(cs.Customers_and_Services_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(DISTINCT cs.Service_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(DISTINCT cs.Service_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services);
SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services);
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID WHERE cs.Service_ID = (SELECT Service_ID                        FROM Customers_and_Services                        GROUP BY Service_ID                        ORDER BY COUNT(*) ASC                        LIMIT 1);
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID WHERE cs.Service_ID = (SELECT Service_ID                        FROM Customers_and_Services                        GROUP BY Service_ID                        ORDER BY COUNT(*) ASC                        LIMIT 1);
SELECT COUNT(DISTINCT Customers_and_Services_ID) FROM Analytical_Layer;
SELECT COUNT(*) FROM Customers, Services;
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%';
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%';
SELECT DISTINCT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch'    OR s.Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good');
SELECT DISTINCT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch'    OR s.Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good');
SELECT DISTINCT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch'    AND s.Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad');
SELECT DISTINCT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch'    AND s.Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad');
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customer_Interactions ci ON cs.Customer_ID = ci.Customer_ID JOIN Channels ch ON ci.Channel_ID = ch.Channel_ID WHERE ch.Channel_Details = '15 ij';
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customer_Interactions ci ON cs.Customer_ID = ci.Customer_ID JOIN Channels ch ON ci.Channel_ID = ch.Channel_ID WHERE ch.Channel_Details = '15 ij';
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Services s ON ci.Service_ID = s.Service_ID JOIN Channels ch ON ci.Channel_ID = ch.Channel_ID WHERE ci.Status_Code = 'Stuck' AND s.Service_Details = 'bad' AND ch.Channel_Details = 'bad';
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Services s ON ci.Service_ID = s.Service_ID JOIN Channels ch ON ci.Channel_ID = ch.Channel_ID WHERE ci.Status_Code = 'Stuck' AND s.Service_Details = 'bad' AND ch.Channel_Details = 'bad';
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'successful';
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%';
```sql SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE ip.Integration_Platform_Details = 'failed'; ```
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE ip.Integration_Platform_Details = 'failed';
SELECT s.Service_Details FROM Services s WHERE s.Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services);
SELECT s.Service_Details FROM Services s WHERE s.Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services);
```sql SELECT s.Service_Details FROM Services s WHERE s.Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services); ```
SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Times_Used FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code;
SELECT * FROM Services WHERE Service_ID IN (     SELECT Service_ID     FROM Customers_and_Services     WHERE Customers_and_Services_Details LIKE '%unsatisfied%' );
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID WHERE cs.Customers_and_Services_Details LIKE '%unsatisfied%';
SELECT COUNT(*) AS Total_Vehicles FROM Vehicles;
SELECT COUNT(*) AS Total_Vehicles FROM Vehicles;
SELECT name FROM Vehicles ORDER BY Model_year DESC;
SELECT name FROM Vehicles ORDER BY Model_year DESC;
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT Type_of_powertrain, COUNT(*) AS Number_of_Vehicles FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, COUNT(*) AS Number_of_Vehicles FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, COUNT(*) AS Number_of_Vehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Number_of_Vehicles DESC LIMIT 1;
SELECT Type_of_powertrain, COUNT(*) AS Number_of_Vehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Number_of_Vehicles DESC LIMIT 1;
SELECT MIN(Annual_fuel_cost) AS Minimum_Annual_Fuel_Cost, MAX(Annual_fuel_cost) AS Maximum_Annual_Fuel_Cost, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles;
SELECT MIN(Annual_fuel_cost) AS Minimum_Annual_Fuel_Cost, MAX(Annual_fuel_cost) AS Maximum_Annual_Fuel_Cost, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles;
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2;
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age FROM Customers WHERE membership_credit = (     SELECT MAX(membership_credit)     FROM Customers );
SELECT name, age FROM Customers WHERE membership_credit = (     SELECT MAX(membership_credit)     FROM Customers );
SELECT AVG(age) AS Average_Age FROM Customers WHERE membership_credit > (     SELECT AVG(membership_credit)     FROM Customers );
SELECT AVG(age) AS Average_Age FROM Customers WHERE membership_credit > (     SELECT AVG(membership_credit)     FROM Customers );
SELECT * FROM Discount;
SELECT * FROM Discount;
SELECT v.name, SUM(r.total_hours) AS Total_Renting_Hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name;
SELECT v.name, SUM(r.total_hours) AS Total_Renting_Hours FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.name;
SELECT name FROM Vehicles WHERE id NOT IN (     SELECT DISTINCT vehicles_id     FROM Renting_history );
SELECT name FROM Vehicles WHERE id NOT IN (     SELECT DISTINCT vehicles_id     FROM Renting_history );
SELECT c.name FROM Customers c WHERE c.id IN (     SELECT customer_id     FROM Renting_history     GROUP BY customer_id     HAVING COUNT(*) >= 2 );
SELECT c.name FROM Customers c WHERE c.id IN (     SELECT customer_id     FROM Renting_history     GROUP BY customer_id     HAVING COUNT(*) >= 2 );
SELECT v.name, v.Model_year FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.id ORDER BY COUNT(r.id) DESC LIMIT 1;
SELECT v.name, v.Model_year FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.id ORDER BY COUNT(r.id) DESC LIMIT 1;
SELECT v.name FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.id ORDER BY SUM(r.total_hours) DESC;
SELECT v.name FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY v.id ORDER BY SUM(r.total_hours) DESC;
SELECT d.name FROM Discount d JOIN Renting_history r ON d.id = r.discount_id GROUP BY d.id ORDER BY COUNT(r.id) DESC LIMIT 1;
SELECT d.name FROM Discount d JOIN Renting_history r ON d.id = r.discount_id GROUP BY d.id ORDER BY COUNT(r.id) DESC LIMIT 1;
SELECT v.name, v.Type_of_powertrain FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id WHERE r.total_hours > 30;
SELECT v.name, v.Type_of_powertrain FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id WHERE r.total_hours > 30;
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Average_City_Fuel_Rate, AVG(Highway_fuel_economy_rate) AS Average_Highway_Fuel_Rate FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Average_City_Fuel_Rate, AVG(Highway_fuel_economy_rate) AS Average_Highway_Fuel_Rate FROM Vehicles GROUP BY Type_of_powertrain;
SELECT AVG(amount_of_loan) AS Average_Student_Loan FROM Student_Loans;
SELECT AVG(amount_of_loan) AS Average_Student_Loan FROM Student_Loans;
SELECT s.bio_data, s.student_id FROM Students s WHERE s.student_id IN (     SELECT student_id     FROM Classes     GROUP BY student_id     HAVING COUNT(*) >= 2 ) AND s.student_id NOT IN (     SELECT student_id     FROM Detention     GROUP BY student_id     HAVING COUNT(*) < 2 );
SELECT s.bio_data, s.student_id FROM Students s WHERE s.student_id IN (     SELECT student_id     FROM Classes     GROUP BY student_id     HAVING COUNT(*) >= 2 ) OR s.student_id IN (     SELECT student_id     FROM Detention     GROUP BY student_id     HAVING COUNT(*) < 2 );
SELECT t.teacher_details FROM Teachers t WHERE t.teacher_id IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE '%data%' ) AND t.teacher_id NOT IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE 'net%' );
SELECT t.teacher_details FROM Teachers t WHERE t.teacher_id IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE '%data%' ) AND t.teacher_id NOT IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE 'net%' );
SELECT s.bio_data FROM Students s WHERE s.student_id NOT IN (     SELECT student_id     FROM Detention ) AND s.student_id NOT IN (     SELECT student_id     FROM Student_Loans );
SELECT s.bio_data FROM Students s WHERE s.student_id NOT IN (     SELECT student_id     FROM Detention ) AND s.student_id NOT IN (     SELECT student_id     FROM Student_Loans );
SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl WHERE sl.student_id IN (     SELECT student_id     FROM Achievements     GROUP BY student_id     HAVING COUNT(*) >= 2 );
SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl WHERE sl.student_id IN (     SELECT student_id     FROM Achievements     GROUP BY student_id     HAVING COUNT(*) >= 2 );
SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY COUNT(c.class_id) DESC LIMIT 1;
SELECT t.teacher_details, t.teacher_id FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY COUNT(c.class_id) DESC LIMIT 1;
SELECT DISTINCT detention_summary FROM Detention;
SELECT DISTINCT detention_summary FROM Detention;
SELECT s.bio_data, a.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT s.bio_data, a.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT a.address_details, s.bio_data FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT Students.bio_data, Addresses.address_details FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id;
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT COUNT(*) AS count, Behaviour_Monitoring.behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) AS count, Behaviour_Monitoring.behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details ORDER BY count DESC LIMIT 1;
SELECT Students.bio_data, Students.student_details FROM Students JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id WHERE Behaviour_Monitoring.behaviour_monitoring_details = (     SELECT Behaviour_Monitoring.behaviour_monitoring_details     FROM Behaviour_Monitoring     GROUP BY Behaviour_Monitoring.behaviour_monitoring_details     ORDER BY COUNT(*) DESC     LIMIT 1 ) AND Students.student_id IN (     SELECT Behaviour_Monitoring.student_id     FROM Behaviour_Monitoring     GROUP BY Behaviour_Monitoring.student_id     HAVING COUNT(*) = 3 );
SELECT Students.bio_data, Students.student_details FROM Students JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id WHERE Behaviour_Monitoring.behaviour_monitoring_details = (     SELECT Behaviour_Monitoring.behaviour_monitoring_details     FROM Behaviour_Monitoring     GROUP BY Behaviour_Monitoring.behaviour_monitoring_details     ORDER BY COUNT(*) DESC     LIMIT 1 ) AND Students.student_id IN (     SELECT Behaviour_Monitoring.student_id     FROM Behaviour_Monitoring     GROUP BY Behaviour_Monitoring.student_id     HAVING COUNT(*) = 3 );
SELECT Students.bio_data, Students.student_details FROM Students WHERE Students.student_id NOT IN (     SELECT DISTINCT Behaviour_Monitoring.student_id     FROM Behaviour_Monitoring     WHERE Behaviour_Monitoring.behaviour_monitoring_details != (         SELECT Behaviour_Monitoring.behaviour_monitoring_details         FROM Behaviour_Monitoring         GROUP BY Behaviour_Monitoring.behaviour_monitoring_details         ORDER BY COUNT(*) DESC         LIMIT 1     ) );
SELECT Students.bio_data, Students.student_details FROM Students WHERE Students.student_id IN (     SELECT DISTINCT Behaviour_Monitoring.student_id     FROM Behaviour_Monitoring     GROUP BY Behaviour_Monitoring.student_id     HAVING COUNT(DISTINCT Behaviour_Monitoring.behaviour_monitoring_details) = 1 );
SELECT Students.bio_data, Student_Events.event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT Students.bio_data, Student_Events.event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT COUNT(*) AS count, Ref_Event_Types.event_type_code, Ref_Event_Types.event_type_description FROM Ref_Event_Types JOIN Student_Events ON Ref_Event_Types.event_type_code = Student_Events.event_type_code GROUP BY Ref_Event_Types.event_type_code, Ref_Event_Types.event_type_description ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) AS count, Ref_Event_Types.event_type_code, Ref_Event_Types.event_type_description FROM Ref_Event_Types JOIN Student_Events ON Ref_Event_Types.event_type_code = Student_Events.event_type_code GROUP BY Ref_Event_Types.event_type_code, Ref_Event_Types.event_type_description ORDER BY count DESC LIMIT 1;
SELECT Achievements.achievement_details, Ref_Achievement_Type.achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;
SELECT Achievements.achievement_details, Ref_Achievement_Type.achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;
SELECT COUNT(DISTINCT Teachers.teacher_id) AS count FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id WHERE Classes.student_id NOT IN (     SELECT student_id     FROM Achievements );
SELECT COUNT(DISTINCT Teachers.teacher_id) AS count FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id WHERE Classes.student_id NOT IN (     SELECT student_id     FROM Achievements );
SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts;
SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts;
SELECT Achievements.achievement_type_code, Achievements.achievement_details, Achievements.date_achievement FROM Achievements;
SELECT Achievements.achievement_type_code, Achievements.achievement_details, Achievements.date_achievement FROM Achievements;
SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention;
SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention;
SELECT * FROM Students WHERE student_details LIKE '%Suite%';
SELECT * FROM Students WHERE student_details LIKE '%Suite%';
SELECT Teachers.teacher_id, Students.student_id, Classes.class_id FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id;
SELECT Teachers.teacher_id, Students.student_id, Classes.class_id FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id;
SELECT teacher_id, COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id ORDER BY course_count DESC LIMIT 1;
SELECT teacher_id, COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id ORDER BY course_count DESC LIMIT 1;
SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
SELECT Students.student_id, Students.student_details FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id HAVING COUNT(Class_id) = 2;
SELECT Students.student_id, Students.student_details FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id HAVING COUNT(Class_id) = 2;
SELECT Detention.detention_type_code, Ref_Detention_Type.detention_type_description FROM Detention JOIN Ref_Detention_Type ON Detention.detention_type_code = Ref_Detention_Type.detention_type_code GROUP BY Detention.detention_type_code, Ref_Detention_Type.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Detention.detention_type_code, Ref_Detention_Type.detention_type_description FROM Detention JOIN Ref_Detention_Type ON Detention.detention_type_code = Ref_Detention_Type.detention_type_code GROUP BY Detention.detention_type_code, Ref_Detention_Type.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Students.bio_data, Students.student_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (     SELECT AVG(amount_of_loan)     FROM Student_Loans );
SELECT Students.bio_data, Students.student_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (     SELECT AVG(amount_of_loan)     FROM Student_Loans );
SELECT MIN(date_of_loan) AS earliest_date_of_loan FROM Student_Loans;
SELECT MIN(date_of_loan) AS earliest_date_of_loan FROM Student_Loans;
```sql SELECT MIN(date_of_loan) AS earliest_date_of_loan FROM Student_Loans; ```
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans);
SELECT t.date_of_transcript FROM Transcripts t JOIN Students s ON t.student_id = s.student_id JOIN (SELECT student_id, MAX(amount_of_loan) as max_loan FROM Student_Loans) max_loan_student ON s.student_id = max_loan_student.student_id;
SELECT t.date_of_transcript FROM Transcripts t JOIN Students s ON t.student_id = s.student_id JOIN (SELECT student_id, MAX(amount_of_loan) as max_loan FROM Student_Loans) max_loan_student ON s.student_id = max_loan_student.student_id;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts);
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts);
SELECT sl.student_id, SUM(sl.amount_of_loan) as total_loan FROM Student_Loans sl GROUP BY sl.student_id;
SELECT sl.student_id, SUM(sl.amount_of_loan) as total_loan FROM Student_Loans sl GROUP BY sl.student_id;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) as course_count FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) as course_count FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id;
SELECT COUNT(DISTINCT student_id) FROM Detention;
SELECT COUNT(DISTINCT student_id) FROM Detention;
SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (     SELECT address_type_code     FROM Students_Addresses     GROUP BY address_type_code     ORDER BY COUNT(address_type_code) DESC     LIMIT 1 );
SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (     SELECT address_type_code     FROM Students_Addresses     GROUP BY address_type_code     ORDER BY COUNT(address_type_code) DESC     LIMIT 1 );
SELECT s.bio_data FROM Students s WHERE s.student_id IN (     SELECT se.student_id     FROM Student_Events se     WHERE se.student_id NOT IN (         SELECT sl.student_id         FROM Student_Loans sl     ) )
SELECT s.bio_data FROM Students s WHERE s.student_id IN (     SELECT se.student_id     FROM Student_Events se     WHERE se.student_id NOT IN (         SELECT sl.student_id         FROM Student_Loans sl     ) )
SELECT sa.date_from, sa.date_to FROM Students_Addresses sa WHERE sa.student_id IN (     SELECT t.student_id     FROM Transcripts t     GROUP BY t.student_id     HAVING COUNT(t.transcript_id) = 2 )
SELECT sa.date_from, sa.date_to FROM Students_Addresses sa WHERE sa.student_id IN (     SELECT t.student_id     FROM Transcripts t     GROUP BY t.student_id     HAVING COUNT(t.transcript_id) = 2 )
SELECT d.datetime_detention_start FROM Detention d
SELECT d.datetime_detention_start FROM Detention d
SELECT a.Name FROM Author a
SELECT a.Name FROM Author a
SELECT c.Name, c.Address FROM Client c
SELECT c.Name, c.Address FROM Client c
SELECT b.Title, b.ISBN, b.SalePrice FROM Book b
SELECT b.Title, b.ISBN, b.SalePrice FROM Book b
SELECT COUNT(ISBN) FROM Book
SELECT COUNT(ISBN) FROM Book
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(IdClient) FROM Client
SELECT COUNT(IdClient) FROM Client
SELECT Name, Address FROM Client ORDER BY Name;
SELECT Name, Address FROM Client ORDER BY Name;
SELECT b.Title, a.Name FROM Book b JOIN Author a ON b.Author = a.idAuthor;
SELECT b.Title, a.Name FROM Book b JOIN Author a ON b.Author = a.idAuthor;
SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
SELECT a.Name, COUNT(ab.ISBN) AS num_books FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author GROUP BY a.Name;
SELECT a.Name, COUNT(ab.ISBN) AS num_books FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author GROUP BY a.Name;
SELECT b.ISBN, COUNT(bo.IdOrder) AS num_orders FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN;
SELECT b.ISBN, COUNT(bo.IdOrder) AS num_orders FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN;
SELECT bo.ISBN, SUM(bo.amount) AS total_ordered FROM Books_Order bo GROUP BY bo.ISBN;
SELECT bo.ISBN, SUM(bo.amount) AS total_ordered FROM Books_Order bo GROUP BY bo.ISBN;
SELECT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.Title ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.Title ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT b.Title, b.PurchasePrice FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.Title ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT b.Title, b.PurchasePrice FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.Title ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT DISTINCT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN;
SELECT DISTINCT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN;
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient;
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient;
SELECT c.Name, COUNT(o.IdOrder) AS num_orders FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name;
SELECT c.Name, COUNT(o.IdOrder) AS num_orders FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
SELECT c.Name, SUM(bo.amount) AS total_books_ordered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name;
SELECT c.Name, SUM(bo.amount) AS total_books_ordered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT b.Title FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN WHERE bo.ISBN IS NULL;
SELECT b.Title FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN WHERE bo.ISBN IS NULL;
SELECT c.Name FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient WHERE o.IdOrder IS NULL;
SELECT c.Name FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient WHERE o.IdOrder IS NULL;
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book;
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book;
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);
SELECT AVG(SalePrice) FROM Book WHERE Author = "George Orwell";
SELECT AVG(SalePrice) FROM Book WHERE Author = "George Orwell";
SELECT SalePrice FROM Book WHERE Author = "Plato";
SELECT SalePrice FROM Book WHERE Author = "Plato";
SELECT Title FROM Book WHERE Author = "George Orwell" ORDER BY SalePrice LIMIT 1;
SELECT Title FROM Book WHERE Author = "George Orwell" ORDER BY SalePrice LIMIT 1;
SELECT Title FROM Book WHERE Author = "Plato" AND SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT Title FROM Book WHERE Author = "Plato" AND SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Author FROM Book WHERE Title = "Pride and Prejudice"
SELECT Author FROM Book WHERE Title = "Pride and Prejudice";
SELECT Title FROM Book WHERE Author LIKE "%Plato%"
SELECT Title FROM Book WHERE Author LIKE "%Plato%"
SELECT SUM(bo.amount) FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = "Pride and Prejudice";
SELECT SUM(bo.amount) FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = "Pride and Prejudice";
SELECT IdOrder FROM Books_Order WHERE ISBN = (     SELECT ISBN     FROM Book     WHERE Title = "Pride and Prejudice" ) INTERSECT SELECT IdOrder FROM Books_Order WHERE ISBN = (     SELECT ISBN     FROM Book     WHERE Title = "The Little Prince" )
SELECT IdOrder FROM Books_Order WHERE ISBN = (     SELECT ISBN     FROM Book     WHERE Title = "Pride and Prejudice" ) INTERSECT SELECT IdOrder FROM Books_Order WHERE ISBN = (     SELECT ISBN     FROM Book     WHERE Title = "The Little Prince" )
SELECT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder WHERE o.IdClient IN (     SELECT IdClient     FROM Client     WHERE Name IN ('Peter Doe', 'James Smith') ) GROUP BY bo.ISBN HAVING COUNT(DISTINCT o.IdClient) = 2;
SELECT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder WHERE o.IdClient IN (     SELECT IdClient     FROM Client     WHERE Name IN ('Peter Doe', 'James Smith') ) GROUP BY bo.ISBN HAVING COUNT(DISTINCT o.IdClient) = 2;
SELECT DISTINCT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND b.Title NOT IN (     SELECT DISTINCT b2.Title     FROM Book b2     JOIN Books_Order bo2 ON b2.ISBN = bo2.ISBN     JOIN Orders o2 ON bo2.IdOrder = o2.IdOrder     JOIN Client c2 ON o2.IdClient = c2.IdClient     WHERE c2.Name = 'James Smith' )
SELECT DISTINCT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND b.Title NOT IN (     SELECT DISTINCT b2.Title     FROM Book b2     JOIN Books_Order bo2 ON b2.ISBN = bo2.ISBN     JOIN Orders o2 ON bo2.IdOrder = o2.IdOrder     JOIN Client c2 ON o2.IdClient = c2.IdClient     WHERE c2.Name = 'James Smith' )
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = "Pride and Prejudice"
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = "Pride and Prejudice"
SELECT COUNT(Book_ID) FROM book
SELECT Title FROM book ORDER BY Title ASC;
SELECT Title FROM book ORDER BY Pages DESC;
SELECT Type, Release FROM book
SELECT Title, MAX(Chapters) AS max_chapters, MIN(Chapters) AS min_chapters FROM book GROUP BY Title;
SELECT Title FROM book WHERE Type <> "Poet"
SELECT AVG(Rating) FROM review
:text) # review(Review_ID:number, Book_ID:number, Rating:number, Readers_in_Million:number, Rank:number) # ### List the titles of books in descending order of rating. AI: SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating DESC;
text) # review(Review_ID:number, Book_ID:number, Rating:number, Readers_in_Million:number, Rank:number) # ### List the titles of books that have more than 300 pages. AI: SELECT Title FROM book WHERE Pages > 300;
Release:text) # review(Review_ID:number, Book_ID:number, Rating:number, Readers_in_Million:number, Rank:number) # ### List the titles of books in ascending order of their release date. AI: SELECT Title FROM book ORDER BY Release ASC;
SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rank DESC LIMIT 1;
SELECT AVG(Readers_in_Million) FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE book.Type = 'Novel';
SELECT Type, COUNT(Book_ID) AS Number_of_Books FROM book GROUP BY Type;
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(Book_ID) DESC LIMIT 1;
SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3;
SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC;
SELECT Title, Audio FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC;
SELECT COUNT(Book_ID) FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Book_ID IS NULL;
SELECT Type FROM book WHERE Book_ID IN (     SELECT Book_ID     FROM book     WHERE Chapters > 75 ) AND Book_ID IN (     SELECT Book_ID     FROM book     WHERE Chapters < 50 );
SELECT COUNT(DISTINCT Type) FROM book;
SELECT Type, Title FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL;
SELECT COUNT(Customer_ID) FROM customer;
SELECT COUNT(*) FROM customer;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT Nationality, Card_Credit FROM customer;
SELECT Nationality, Card_Credit FROM customer;
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia';
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia';
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1;
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1;
SELECT Nationality, COUNT(Customer_ID) AS Number_of_Customers FROM customer GROUP BY Nationality;
SELECT Nationality, COUNT(Customer_ID) AS Number_of_Customers FROM customer GROUP BY Nationality;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1;
SELECT Nationality FROM customer WHERE Customer_ID IN (     SELECT Customer_ID     FROM customer     WHERE Card_Credit < 50 ) AND Customer_ID IN (     SELECT Customer_ID     FROM customer     WHERE Card_Credit > 75 );
SELECT Nationality FROM customer WHERE Customer_ID IN (     SELECT Customer_ID     FROM customer     WHERE Card_Credit > 50 ) AND Customer_ID IN (     SELECT Customer_ID     FROM customer     WHERE Card_Credit < 75 );
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID;
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID;
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC;
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC;
SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name;
SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name;
SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name HAVING SUM(co.Quantity) > 1;
SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name HAVING SUM(co.Quantity) > 1;
SELECT DISTINCT Manager FROM branch;
SELECT DISTINCT Manager FROM branch;
SELECT Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
SELECT Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
SELECT COUNT(Member_ID) FROM member;
SELECT Name FROM member ORDER BY Age ASC;
SELECT Name, Nationality FROM member;
SELECT Name FROM member WHERE Nationality != 'England';
SELECT Name FROM member WHERE Age = 19 OR Age = 20;
SELECT Name FROM member ORDER BY Age DESC LIMIT 1;
SELECT Nationality, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Nationality;
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(Member_ID) DESC LIMIT 1;
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2;
SELECT m.Name AS Club_Leader, c.Club_Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON c.Club_ID = cl.Club_ID;
SELECT m.Name AS Club_Leader FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON c.Club_ID = cl.Club_ID WHERE c.Overall_Ranking > 100;
SELECT m.Name AS Club_Leader FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018;
SELECT m.Name AS Club_Leader FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON c.Club_ID = cl.Club_ID WHERE c.Club_Name = "Houston";
SELECT Name FROM member WHERE Member_ID NOT IN (     SELECT Member_ID     FROM club_leader );
SELECT Nationality FROM member WHERE Member_ID IN (     SELECT Member_ID     FROM member     WHERE Age > 22 ) AND Member_ID IN (     SELECT Member_ID     FROM member     WHERE Age < 19 );
SELECT AVG(Age) FROM member WHERE Member_ID IN (     SELECT Member_ID     FROM club_leader );
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%';
SELECT Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subset_Name FROM Collection_Subsets;
SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection';
SELECT Collection_Description FROM Collections WHERE Collection_ID IN (     SELECT Related_Collection_ID     FROM Collection_Subset_Members     WHERE Collection_Subset_ID IN (         SELECT Collection_Subset_ID         FROM Collection_Subsets         WHERE Collection_Subset_Name = 'Top collection'     ) );
SELECT Document_Subset_Name FROM Document_Subsets;
SELECT Document_Subset_Name FROM Document_Subsets;
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Object_ID FROM Document_Objects;
SELECT Document_Object_ID FROM Document_Objects;
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (     SELECT Parent_Document_Object_ID     FROM Document_Objects     WHERE Owner = 'Marlin' );
SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (     SELECT Parent_Document_Object_ID     FROM Document_Objects     WHERE Owner = 'Marlin' );
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL;
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL;
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin';
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (     SELECT DISTINCT Parent_Document_Object_ID     FROM Document_Objects     WHERE Parent_Document_Object_ID IS NOT NULL );
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (     SELECT DISTINCT Parent_Document_Object_ID     FROM Document_Objects     WHERE Parent_Document_Object_ID IS NOT NULL );
SELECT Parent_Document_Object_ID, COUNT(*) AS Number_of_Child_Documents FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID;
SELECT Parent_Document_Object_ID, COUNT(*) AS Number_of_Child_Documents FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID;
SELECT Collection_Name FROM Collections;
SELECT Collection_Name FROM Collections;
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT c2.Collection_Name FROM Collections c1 JOIN Collections c2 ON c1.Parent_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Nice';
SELECT c2.Collection_Name FROM Collections c1 JOIN Collections c2 ON c1.Parent_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Nice';
SELECT c1.Collection_Name FROM Collections c1 LEFT JOIN Collections c2 ON c1.Collection_ID = c2.Parent_Collection_ID WHERE c2.Parent_Collection_ID IS NULL;
SELECT c1.Collection_Name FROM Collections c1 LEFT JOIN Collections c2 ON c1.Collection_ID = c2.Parent_Collection_ID WHERE c2.Parent_Collection_ID IS NULL;
SELECT Parent_Document_Object_ID, COUNT(*) AS Number_of_Child_Documents FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1;
SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_ID = (     SELECT Collection_ID     FROM Collections     WHERE Collection_Name = 'Best' );
SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_ID = (     SELECT Collection_ID     FROM Collections     WHERE Collection_Name = 'Best' );
SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID = (     SELECT Document_Object_ID     FROM Document_Objects     WHERE Owner = 'Ransom' );
SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID = (     SELECT Document_Object_ID     FROM Document_Objects     WHERE Owner = 'Ransom' );
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID)  FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name;
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID)  FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name;
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Child_Count FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY Child_Count DESC LIMIT 1;
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Child_Count FROM Document_Objects GROUP BY Parent_Document_Object_ID;
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Related_Document_Count LIMIT 1;
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Related_Document_Count LIMIT 1;
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Document_Count BETWEEN 2 AND 4;
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Document_Count BETWEEN 2 AND 4;
SELECT DISTINCT d.Owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID WHERE m.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden');
SELECT DISTINCT d.Owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID WHERE m.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden');
SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden';
SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden';
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID)  FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name;
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID)  FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name;
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY Document_Count DESC LIMIT 1;
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY Document_Count DESC LIMIT 1;
SELECT Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000';
SELECT Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000';
SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID;
SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID;
SELECT c.Collection_Name FROM Collections c JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID JOIN Document_Objects do ON dic.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom';
SELECT c.Collection_Name FROM Collections c JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID JOIN Document_Objects do ON dic.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom';
SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID;
SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID;
SELECT COUNT(Document_Object_ID)  FROM Documents_in_Collections  WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT COUNT(Document_Object_ID)  FROM Documents_in_Collections  WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT c.Collection_ID, c.Collection_Name, COUNT(dc.Document_Object_ID) AS Document_Count FROM Collections c JOIN Documents_in_Collections dc ON c.Collection_ID = dc.Collection_ID GROUP BY c.Collection_ID, c.Collection_Name ORDER BY Document_Count DESC LIMIT 1;
SELECT c.Collection_ID, c.Collection_Name, COUNT(dc.Document_Object_ID) AS Document_Count FROM Collections c JOIN Documents_in_Collections dc ON c.Collection_ID = dc.Collection_ID WHERE c.Collection_Name = 'Best' GROUP BY c.Collection_ID, c.Collection_Name ORDER BY Document_Count DESC LIMIT 1;
SELECT dsm.Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Collections c ON c.Collection_ID = dsm.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best';
SELECT dsm.Document_Object_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Collections c ON c.Collection_ID = dsm.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best';
SELECT dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Collections c ON c.Collection_ID = dsm.Collection_ID WHERE c.Collection_Name = 'Best' AND dsm.Document_Subset_ID <> (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000');
SELECT dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Collections c ON c.Collection_ID = dsm.Collection_ID WHERE c.Collection_Name = 'Best' AND dsm.Document_Subset_ID <> (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000');
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE csm.Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best');
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE csm.Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best');
SELECT COUNT(c.Collection_ID) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE csm.Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best');
SELECT COUNT(c.Collection_ID) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE csm.Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best');
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(id)  FROM songs  WHERE name LIKE '%Love%';
SELECT name FROM songs ORDER BY name ASC;
SELECT name, language FROM songs;
SELECT MAX(voice_sound_quality) AS Max_Voice_Sound_Quality, MIN(voice_sound_quality) AS Min_Voice_Sound_Quality FROM performance_score;
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE participant_id = (SELECT id FROM participants WHERE name = 'Freeway');
SELECT id, language, original_artist FROM songs WHERE name <> 'Love';
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love';
SELECT DISTINCT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English');
SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) >= 2);
SELECT p.id, p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY COUNT(ps.songs_id) DESC;
SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality = 5 OR rhythm_tempo = 5);
SELECT voice_sound_quality FROM performance_score WHERE songs_id = (SELECT id FROM songs WHERE name = 'The Balkan Girls' AND language = 'English');
SELECT songs_id, name FROM performance_score GROUP BY songs_id, name ORDER BY COUNT(DISTINCT participant_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM performance_score  WHERE stage_presence < 7 OR stage_presence > 9;
SELECT COUNT(*)  FROM songs  WHERE id NOT IN (SELECT songs_id FROM performance_score);
SELECT language, AVG(rhythm_tempo) AS Average_Rhythm_Score FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language;
SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';
SELECT p.name, p.popularity FROM participants p WHERE p.id IN (     SELECT participant_id     FROM performance_score ps     JOIN songs s ON ps.songs_id = s.id     WHERE s.language = 'Croatian'     INTERSECT     SELECT participant_id     FROM performance_score ps     JOIN songs s ON ps.songs_id = s.id     WHERE s.language = 'English' );
SELECT name FROM songs WHERE name LIKE '%Is%';
SELECT DISTINCT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC;
SELECT COUNT(city_code)  FROM City;
SELECT COUNT(city_code)  FROM City;
SELECT DISTINCT state FROM City;
SELECT DISTINCT state FROM City;
SELECT COUNT(DISTINCT country)  FROM City;
SELECT COUNT(DISTINCT country)  FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA';
SELECT COUNT(city_name)  FROM City  WHERE country = 'Canada';
SELECT COUNT(city_name)  FROM City  WHERE country = 'Canada';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT state, COUNT(city_name) AS City_Count FROM City GROUP BY state;
SELECT state, COUNT(city_name) AS City_Count FROM City GROUP BY state;
SELECT country, COUNT(city_name) AS City_Count FROM City GROUP BY country;
SELECT country, COUNT(city_name) AS City_Count FROM City GROUP BY country;
SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2;
SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2;
SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1;
SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1;
SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities LIMIT 1;
SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities LIMIT 1;
SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD');
SELECT Fname || ' ' || LName AS full_name FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD');
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China');
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China');
SELECT Fname, Major FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore');
SELECT Fname, Major FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore');
SELECT country, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country;
SELECT country, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country;
SELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name;
SELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name;
SELECT state, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY state ORDER BY num_students DESC LIMIT 1;
SELECT state, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY state ORDER BY num_students DESC LIMIT 1;
SELECT country, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country ORDER BY num_students LIMIT 1;
SELECT country, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country ORDER BY num_students LIMIT 1;
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3);
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3);
SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(*) > 5;
SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(*) > 5;
SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country <> 'USA');
SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country <> 'USA');
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA');
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA');
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code IN (SELECT city_code FROM City WHERE country <> 'USA');
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code IN (SELECT city_code FROM City WHERE country <> 'USA');
I'm sorry, I do not have the information on the distance between BAL and CHI in the given SQL tables.
SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL');
SELECT distance FROM Direct_distance WHERE (city1_code = 'Boston' AND city2_code = 'Newark') OR (city1_code = 'Newark' AND city2_code = 'Boston');
SELECT distance FROM Direct_distance WHERE (city1_code = 'Boston' AND city2_code = 'Newark') OR (city1_code = 'Newark' AND city2_code = 'Boston');
SELECT AVG(distance) AS avg_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance;
SELECT AVG(distance) AS avg_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'Boston' OR city2_code = 'Boston';
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'Boston' OR city2_code = 'Boston';
SELECT city_name FROM City WHERE city_code = (SELECT city1_code FROM Direct_distance WHERE city2_code = 'CHI' ORDER BY distance LIMIT 1) OR city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city1_code FROM Direct_distance WHERE city2_code = 'CHI' ORDER BY distance LIMIT 1) OR city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city1_code FROM Direct_distance WHERE city2_code = 'Boston' ORDER BY distance DESC LIMIT 1) OR city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'Boston' ORDER BY distance DESC LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city1_code FROM Direct_distance WHERE city2_code = 'Boston' ORDER BY distance DESC LIMIT 1) OR city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'Boston' ORDER BY distance DESC LIMIT 1);
SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code;
SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code;
SELECT city_name, AVG(distance) AS avg_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_name;
SELECT city_name, AVG(distance) AS avg_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_name;
I'm sorry, I do not have the information on the specific students' locations in the given SQL tables.
I'm sorry, I do not have the specific information on the locations of Linda Smith and Tracy Kim in the given SQL tables.
SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code ORDER BY distance DESC LIMIT 1;
SELECT Fname || ' ' || LName AS full_name FROM Student JOIN City ON Student.city_code = City.city_code ORDER BY distance DESC LIMIT 1;
SELECT state FROM City WHERE city_code = (SELECT city_code FROM Student WHERE Fname = 'Linda');
SELECT state FROM City WHERE city_code = (SELECT city_code FROM Student WHERE Fname = 'Linda');
SELECT * FROM Sailors WHERE age > 30;
SELECT * FROM Sailors WHERE age > 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT *  FROM Boats  WHERE bid IN      (SELECT bid       FROM Reserves       WHERE sid = 1);
SELECT bid FROM Reserves WHERE sid = 1;
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102);
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102);
SELECT DISTINCT bid FROM Reserves;
SELECT DISTINCT bid FROM Reserves;
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT DISTINCT sid FROM Sailors WHERE age > ALL (SELECT age FROM Sailors);
SELECT DISTINCT sid FROM Sailors WHERE age < (SELECT MIN(age) FROM Sailors);
SELECT DISTINCT name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating > 7);
SELECT DISTINCT name FROM Sailors WHERE age > ANY (SELECT age FROM Sailors WHERE rating > 7);
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves               GROUP BY sid               HAVING COUNT(bid) > 1);
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves               GROUP BY sid               HAVING COUNT(bid) >= 2);
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue');
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue');
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue'));
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue'));
SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) = 2 AND 1 = ALL (SELECT b.color = 'red' OR b.color = 'blue' FROM Boats b WHERE b.bid = r.bid);
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red') INTERSECT SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue');
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red') INTERSECT SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue'));
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red') INTERSECT SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue'));
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103);
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103);
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT sid, name FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves);
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1;
SELECT COUNT(*) FROM Sailors;
SELECT COUNT(*) FROM Sailors;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%';
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%';
SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors;
SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid;
SELECT rating, AVG(age) AS avg_age FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')) GROUP BY rating;
SELECT rating, AVG(age) AS avg_age FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')) GROUP BY rating;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30));
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30));
by step. Complete sqlite SQL query only and with no explanation ### SQLite SQL tables, with their properties: # # Sailors(sid:number, name:text, rating:number, age:number) # Boats(bid:number, name:text, color:text) # Reserves(sid:number, bid:number, day:text) # ### How many boats are of the color red?   AI: SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating)                 FROM Sailors                 WHERE sid IN (SELECT sid                                FROM Reserves                                JOIN Boats ON Reserves.bid = Boats.bid                                WHERE color = 'red'));
SELECT MAX(rating) FROM Sailors;
SELECT MAX(rating) FROM Sailors;
SELECT name FROM Sailors WHERE sid IN (SELECT sid               FROM Reserves               JOIN Boats ON Reserves.bid = Boats.bid               WHERE Boats.name = 'Melon');
SELECT name FROM Sailors WHERE sid IN (SELECT sid               FROM Reserves               JOIN Boats ON Reserves.bid = Boats.bid               WHERE Boats.name = 'Melon');
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone);
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone);
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC;
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC;
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) > 2;
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) <= 2;
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT Earpads, COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2;
SELECT Earpads, COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2;
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone);
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone);
SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction;
SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction;
SELECT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2;
SELECT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2;
SELECT DISTINCT Earpads FROM headphone WHERE Construction != 'Plastic';
SELECT DISTINCT Earpads FROM headphone WHERE Construction != 'Plastic';
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone);
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone);
SELECT Name FROM store ORDER BY Date_Opened;
SELECT Name FROM store ORDER BY Date_Opened;
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';
SELECT COUNT(DISTINCT Neighborhood) FROM store;
SELECT COUNT(DISTINCT Neighborhood) FROM store;
SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood;
SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood;
SELECT Name, SUM(Quantity) AS Total_Headphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY Name ORDER BY Total_Headphones DESC LIMIT 1;
SELECT Name, SUM(Quantity) AS Total_Headphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY Name ORDER BY Total_Headphones DESC LIMIT 1;
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock);
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock);
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock);
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock);
SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID                       FROM stock                       GROUP BY Headphone_ID                       ORDER BY SUM(Quantity) DESC                       LIMIT 1);
SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID                       FROM stock                       GROUP BY Headphone_ID                       ORDER BY SUM(Quantity) DESC                       LIMIT 1);
SELECT SUM(Quantity) FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman');
SELECT SUM(Quantity) FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman');
SELECT Neighborhood FROM store WHERE Neighborhood NOT IN (SELECT Neighborhood                            FROM store                            JOIN stock ON store.Store_ID = stock.Store_ID);
SELECT Neighborhood FROM store WHERE Neighborhood NOT IN (SELECT Neighborhood                            FROM store                            JOIN stock ON store.Store_ID = stock.Store_ID);
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(*) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Affiliation.name = 'Columbia University' AND year = 2009;
SELECT COUNT(*) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Affiliation.name = 'Columbia University' AND year = 2009;
SELECT name, address FROM Affiliation;
SELECT name, address FROM Affiliation;
SELECT venue, year FROM Paper ORDER BY year;
SELECT DISTINCT venue FROM Paper ORDER BY year;
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University';
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University';
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown';
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown';
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.paper_id IN     (SELECT paper_id      FROM Author_list      JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id      WHERE Affiliation.name = 'Columbia University');
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.paper_id IN     (SELECT paper_id      FROM Author_list      JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id      WHERE Affiliation.name = 'Columbia University');
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen';
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen';
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown' AND Paper.paper_id NOT IN     (SELECT paper_id      FROM Author_list      JOIN Author ON Author_list.author_id = Author.author_id      WHERE Author.name = 'Rambow');
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown' AND Paper.paper_id NOT IN     (SELECT paper_id      FROM Author_list      JOIN Author ON Author_list.author_id = Author.author_id      WHERE Author.name = 'Rambow');
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen';
SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen';
SELECT name, COUNT(paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name ORDER BY num_papers DESC;
SELECT name, COUNT(paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name ORDER BY num_papers DESC;
SELECT name, COUNT(paper_id) AS num_papers FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id GROUP BY name ORDER BY num_papers ASC;
SELECT name, COUNT(paper_id) AS num_papers FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id GROUP BY name ORDER BY num_papers ASC;
SELECT name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name HAVING COUNT(paper_id) > 50;
SELECT name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name HAVING COUNT(paper_id) > 50;
SELECT name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name HAVING COUNT(paper_id) = 1;
SELECT name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name HAVING COUNT(paper_id) = 1;
SELECT venue, year  FROM Paper  GROUP BY venue, year  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT venue, year  FROM Paper  GROUP BY venue, year  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1;
